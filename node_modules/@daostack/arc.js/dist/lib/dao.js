"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bn_js_1 = __importDefault(require("bn.js"));
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var operators_1 = require("rxjs/operators");
var index_1 = require("./index");
var DAO = /** @class */ (function (_super) {
    __extends(DAO, _super);
    function DAO() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DAO.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a;
        var where = '';
        if (!options.where) {
            options.where = {};
        }
        for (var _i = 0, _b = Object.keys(options.where); _i < _b.length; _i++) {
            var key = _b[_i];
            if (options.where[key] === undefined) {
                continue;
            }
            if (key === 'address') {
                var option = options.where[key];
                index_1.isAddress(option);
                options.where[key] = option.toLowerCase();
            }
            where += key + ": \"" + options.where[key] + "\"\n";
        }
        var query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query SearchDaosWithAllData {\n      daos ", " {\n        ...DAOFields\n        }\n      }\n      ", ""], ["query SearchDaosWithAllData {\n      daos ", " {\n        ...DAOFields\n        }\n      }\n      ", ""])), index_1.createGraphQlQuery(options, where), DAO.fragments.DAOFields);
        var itemMap = function (arc, item, queriedId) {
            var state = DAO.itemMap(arc, item, queriedId);
            return new DAO(arc, state);
        };
        return context.getObservableList(context, query, itemMap, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
    };
    DAO.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["query DAOById {\n        dao(id: \"", "\") {\n          ...DAOFields\n        }\n      }\n      ", "\n     "], ["query DAOById {\n        dao(id: \"", "\") {\n          ...DAOFields\n        }\n      }\n      ", "\n     "])), this.id, DAO.fragments.DAOFields);
        return this.context.getObservableObject(this.context, query, DAO.itemMap, this.id, apolloQueryOptions);
    };
    DAO.prototype.nativeReputation = function () {
        return this.state()
            .pipe(operators_1.first())
            .pipe(operators_1.map(function (r) { return r.reputation.entity; }));
    };
    DAO.prototype.ethBalance = function () {
        return __awaiter(this, void 0, void 0, function () {
            var avatar, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        avatar = this.context.getContract(this.id);
                        _b = (_a = this.context).ethBalance;
                        return [4 /*yield*/, avatar.vault()];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    DAO.prototype.plugins = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.dao = this.id;
        return index_1.Plugin.search(this.context, options, apolloQueryOptions);
    };
    DAO.prototype.proposalPlugins = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.dao = this.id;
        return index_1.ProposalPlugin.search(this.context, options, apolloQueryOptions);
    };
    DAO.prototype.plugin = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var plugins;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.plugins(options).pipe(operators_1.first()).toPromise()];
                    case 1:
                        plugins = _a.sent();
                        if (plugins.length === 1) {
                            return [2 /*return*/, plugins[0]];
                        }
                        else {
                            throw Error('Could not find a unique plugin satisfying these options');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DAO.prototype.proposalPlugin = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var plugins;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.proposalPlugins(options).pipe(operators_1.first()).toPromise()];
                    case 1:
                        plugins = _a.sent();
                        if (plugins.length === 1) {
                            return [2 /*return*/, plugins[0]];
                        }
                        else {
                            throw Error('Could not find a unique plugin satisfying these options');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DAO.prototype.members = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.dao = this.id;
        return index_1.Member.search(this.context, options, apolloQueryOptions);
    };
    DAO.prototype.member = function (idOrOpts) {
        if (typeof idOrOpts !== 'string') {
            if (this.coreState) {
                // construct member with the reputationcontract address, if this is known
                // so it can make use of the apollo cache
                idOrOpts.reputation = this.coreState.reputationTotalSupply;
                idOrOpts.contract = this.coreState.reputation.entity.address;
            }
        }
        return new index_1.Member(this.context, idOrOpts);
    };
    DAO.prototype.proposals = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.dao = this.id;
        return index_1.Proposal.search(this.context, options, apolloQueryOptions);
    };
    DAO.prototype.rewards = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.dao = this.id;
        return index_1.Reward.search(this.context, options, apolloQueryOptions);
    };
    DAO.prototype.votes = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.dao = this.id;
        return index_1.Vote.search(this.context, options, apolloQueryOptions);
    };
    DAO.prototype.stakes = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.dao = this.id;
        return index_1.Stake.search(this.context, options, apolloQueryOptions);
    };
    DAO.prototype.createProposal = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var pluginId, plugin;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options.dao = this.id;
                        if (!options.plugin) {
                            throw Error("dao.createProposal(options): options must include an address for \"plugin\"");
                        }
                        pluginId = index_1.Plugin.calculateId({
                            daoAddress: options.dao,
                            contractAddress: options.plugin
                        });
                        return [4 /*yield*/, this.proposalPlugin({ where: { id: pluginId } })];
                    case 1:
                        plugin = _a.sent();
                        return [2 /*return*/, plugin.createProposal(options)];
                }
            });
        });
    };
    DAO.fragments = {
        DAOFields: graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      fragment DAOFields on DAO {\n        id\n        name\n        nativeReputation {\n          id\n          totalSupply\n        }\n        nativeToken {\n          id\n          name\n          symbol\n          totalSupply\n        }\n        numberOfQueuedProposals\n        numberOfPreBoostedProposals\n        numberOfBoostedProposals\n        register\n        reputationHoldersCount\n      }\n    "], ["\n      fragment DAOFields on DAO {\n        id\n        name\n        nativeReputation {\n          id\n          totalSupply\n        }\n        nativeToken {\n          id\n          name\n          symbol\n          totalSupply\n        }\n        numberOfQueuedProposals\n        numberOfPreBoostedProposals\n        numberOfBoostedProposals\n        register\n        reputationHoldersCount\n      }\n    "])))
    };
    DAO.itemMap = function (context, item, queriedId) {
        if (!item) {
            throw Error("DAO ItemMap failed. " + (queriedId && "Could not find DAO with id '" + queriedId + "'"));
        }
        return {
            address: item.id,
            id: item.id,
            memberCount: Number(item.reputationHoldersCount),
            name: item.name,
            numberOfBoostedProposals: Number(item.numberOfBoostedProposals),
            numberOfPreBoostedProposals: Number(item.numberOfPreBoostedProposals),
            numberOfQueuedProposals: Number(item.numberOfQueuedProposals),
            register: item.register,
            reputation: {
                id: item.nativeReputation.id,
                entity: new index_1.Reputation(context, item.nativeReputation.id)
            },
            reputationTotalSupply: new bn_js_1.default(item.nativeReputation.totalSupply),
            token: {
                id: item.nativeToken.id,
                entity: new index_1.Token(context, item.nativeToken.id)
            },
            tokenName: item.nativeToken.name,
            tokenSymbol: item.nativeToken.symbol,
            tokenTotalSupply: item.nativeToken.totalSupply
        };
    };
    return DAO;
}(index_1.Entity));
exports.DAO = DAO;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=dao.js.map