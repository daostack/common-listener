"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var contract_1 = require("ethers/contract");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var index_1 = require("../index");
var ITransactionState;
(function (ITransactionState) {
    ITransactionState[ITransactionState["Sending"] = 0] = "Sending";
    ITransactionState[ITransactionState["Sent"] = 1] = "Sent";
    ITransactionState[ITransactionState["Mined"] = 2] = "Mined";
})(ITransactionState = exports.ITransactionState || (exports.ITransactionState = {}));
/**
 *
 *  * send a transaction to the ethereumblockchain, and return a observable of ITransactionUpdatessend
 * for example:
 *  ```sendTransaction(.....).subscribe((txUpdate) => {
 *    if (txUpdate.state === 'sent' ) { notify("your transaction has been sent, waitin'for it to be mnied") }
 *    if (txUpdate.state === 'mined'} {
 *      notify("your transaction has been mined! It was confirmed ${txUpdate.confirmations} times"}
 *      // and we also ahve the txUpdate.receipt and the txUpdate.result to do stuff with
 *    }
 *  })```
 *
 * @export
 * @template T
 * @param {Arc} context An instance of Arc
 * @param {Transaction} transaction A Web3 transaction object to send
 * @param {TransactionResultHandler<T>} mapReceipt A function that takes the receipt of
 *  the transaction and returns an object
 * @param {TransactionErrorHandler} [errorHandler]
 *  A function that takes an error, and either returns or throws a more informative Error
 *  if errorHander is not provided, a default error handler will throw any errors thrown by calling `transaction.call()`
 * @returns {Operation<T>}
 */
function sendTransaction(context, tx, mapReceipt, errorHandler) {
    var _this = this;
    var methodInfo = tx.contract.interface.functions[tx.method];
    if (methodInfo === undefined) {
        throw Error("Trying to call non-existent function named '" + tx.method + "' at address " + tx.contract.address);
    }
    if (methodInfo.type === 'call') {
        throw Error("Trying to send a transaction to a pure function named '" + tx.method + "' at address " + tx.contract.address);
    }
    if (methodInfo.inputs.length !== tx.args.length) {
        throw Error("Incorrect number of arguments. Expected " + methodInfo.inputs.length + " for method '" + tx.method + "', " +
            ("got " + tx.args.length + ".\nInputs: " + JSON.stringify(methodInfo.inputs, null, 2)));
    }
    var observable = rxjs_1.Observable.create(function (observer) { return __awaiter(_this, void 0, void 0, function () {
        var catchHandler, signer, contract, gasLimit, error_1, _a, _b, overrides, response, hash, result, error_2, _c, _d, confirmations, receipt, web3, onNewBlock;
        var _e;
        var _this = this;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    catchHandler = function (error, transaction, from) { return __awaiter(_this, void 0, void 0, function () {
                        var err_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, errorHandler(error, tx, { from: from })];
                                case 1:
                                    error = _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    err_1 = _a.sent();
                                    error = err_1;
                                    return [3 /*break*/, 3];
                                case 3:
                                    observer.error(error);
                                    return [2 /*return*/];
                            }
                        });
                    }); };
                    return [4 /*yield*/, context.getSigner().pipe(operators_1.first()).toPromise()
                        // Construct a new contract with the current signer
                    ];
                case 1:
                    signer = _f.sent();
                    contract = new contract_1.Contract(tx.contract.address, tx.contract.interface, signer);
                    gasLimit = 0;
                    if (!tx.opts) {
                        tx.opts = {};
                    }
                    if (!tx.opts.gasLimit) return [3 /*break*/, 2];
                    gasLimit = tx.opts.gasLimit;
                    return [3 /*break*/, 7];
                case 2:
                    _f.trys.push([2, 4, , 7]);
                    return [4 /*yield*/, (_e = contract.estimate)[tx.method].apply(_e, __spreadArrays(tx.args, [tx.opts]))];
                case 3:
                    gasLimit = (_f.sent()).toNumber();
                    return [3 /*break*/, 7];
                case 4:
                    error_1 = _f.sent();
                    _a = catchHandler;
                    _b = [error_1, tx];
                    return [4 /*yield*/, signer.getAddress()];
                case 5: return [4 /*yield*/, _a.apply(void 0, _b.concat([_f.sent()]))];
                case 6:
                    _f.sent();
                    return [3 /*break*/, 7];
                case 7:
                    overrides = __assign(__assign({}, tx.opts), { gasLimit: gasLimit ? gasLimit : 1000000 });
                    hash = '';
                    observer.next({
                        state: ITransactionState.Sending
                    });
                    _f.label = 8;
                case 8:
                    _f.trys.push([8, 10, , 13]);
                    return [4 /*yield*/, contract[tx.method].apply(contract, __spreadArrays(tx.args, [overrides]))];
                case 9:
                    response = _f.sent();
                    return [3 /*break*/, 13];
                case 10:
                    error_2 = _f.sent();
                    _c = catchHandler;
                    _d = [error_2, tx];
                    return [4 /*yield*/, signer.getAddress()];
                case 11: return [4 /*yield*/, _c.apply(void 0, _d.concat([_f.sent()]))];
                case 12:
                    _f.sent();
                    return [2 /*return*/];
                case 13:
                    if (!response.hash) {
                        throw Error('Transaction hash is undefined');
                    }
                    hash = response.hash;
                    index_1.Logger.debug('Sending transaction..');
                    observer.next({
                        state: ITransactionState.Sent,
                        transactionHash: hash
                    });
                    confirmations = 1;
                    return [4 /*yield*/, response.wait(confirmations)
                        // Map the results
                    ];
                case 14:
                    receipt = _f.sent();
                    return [4 /*yield*/, mapReceipt(receipt)];
                case 15:
                    // Map the results
                    result = _f.sent();
                    index_1.Logger.debug('transaction mined!');
                    observer.next({
                        confirmations: confirmations,
                        receipt: receipt,
                        result: result,
                        state: ITransactionState.Mined,
                        transactionHash: hash
                    });
                    /**
                     * Keep our own count here because ganache and infura are not consistent in how they count the
                     * confirmatipn events.  Sometimes a confirmation event can appear before the receipt event.
                     * Infura tends to start the confirmation count at 0, whereas ganache (in the test env) likes to start it at 1.
                     * A consequence of the latter is that when we hit 24 events, there may or may not have been 24 actual minings --
                     * we may have incorrectly counted the "receipt" event as a confirmation.
                     */
                    if (!context.web3) {
                        throw new Error('Web3 provider not set');
                    }
                    web3 = context.web3;
                    onNewBlock = function (blockNumber) { return __awaiter(_this, void 0, void 0, function () {
                        var latestConfirmations, _a, _b, _c;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0: return [4 /*yield*/, web3.getTransactionReceipt(response.hash)];
                                case 1:
                                    latestConfirmations = (_d.sent()).confirmations;
                                    if (!latestConfirmations || confirmations >= latestConfirmations) {
                                        // Wait for a new block, as there are no new confirmations
                                        return [2 /*return*/];
                                    }
                                    else {
                                        // We've received new confirmations!
                                        confirmations = latestConfirmations;
                                    }
                                    // Update the observer
                                    _b = (_a = observer).next;
                                    _c = {
                                        confirmations: confirmations
                                    };
                                    return [4 /*yield*/, response.wait(confirmations)];
                                case 2:
                                    // Update the observer
                                    _b.apply(_a, [(_c.receipt = _d.sent(),
                                            _c.result = result,
                                            _c.state = ITransactionState.Mined,
                                            _c.transactionHash = hash,
                                            _c)]);
                                    // the web3 observer will confirm up to 24 subscriptions, so we are done here
                                    if (confirmations > 23) {
                                        web3.removeListener('block', onNewBlock);
                                        observer.complete();
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    }); };
                    context.web3.on('block', onNewBlock);
                    return [2 /*return*/];
            }
        });
    }); });
    return toIOperationObservable(observable);
}
exports.sendTransaction = sendTransaction;
function toIOperationObservable(observable) {
    // the 3rd update we get from the observable is the confirmation that it is mined
    // @ts-ignore
    observable.send = function () { return observable.pipe(operators_1.take(3)).toPromise(); };
    // @ts-ignore
    return observable;
}
exports.toIOperationObservable = toIOperationObservable;
function getEvent(receipt, eventName, codeScope) {
    if (!receipt.events || receipt.events.length === 0) {
        throw Error(codeScope + ": missing events in receipt");
    }
    var event = receipt.events.find(function (e) { return e.event === eventName; });
    if (!event) {
        throw Error(codeScope + ": missing " + eventName + " event");
    }
    return event;
}
exports.getEvent = getEvent;
function getEventArgs(receipt, eventName, codeScope) {
    return getEventAndArgs(receipt, eventName, codeScope)[1];
}
exports.getEventArgs = getEventArgs;
function getEventAndArgs(receipt, eventName, codeScope) {
    var event = getEvent(receipt, eventName, codeScope);
    if (!event.args) {
        throw Error(codeScope + ": missing " + eventName + " event args");
    }
    return [event, event.args];
}
exports.getEventAndArgs = getEventAndArgs;
//# sourceMappingURL=operation.js.map