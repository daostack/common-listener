"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bn_js_1 = __importDefault(require("bn.js"));
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var operators_1 = require("rxjs/operators");
var index_1 = require("./index");
var Reputation = /** @class */ (function (_super) {
    __extends(Reputation, _super);
    function Reputation(context, idOrOpts) {
        var _this = _super.call(this, context, idOrOpts) || this;
        if (typeof idOrOpts === 'string') {
            index_1.isAddress(idOrOpts);
            _this.address = idOrOpts;
            _this.id = idOrOpts;
        }
        else {
            index_1.isAddress(idOrOpts.address);
            _this.address = idOrOpts.address;
            _this.id = idOrOpts.address;
            _this.setState(idOrOpts);
        }
        return _this;
    }
    Reputation.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a;
        var where = '';
        if (!options.where) {
            options.where = {};
        }
        for (var _i = 0, _b = Object.keys(options.where); _i < _b.length; _i++) {
            var key = _b[_i];
            if (options[key] === undefined) {
                continue;
            }
            if (key === 'dao') {
                var option = options[key];
                index_1.isAddress(option);
                options[key] = option.toLowerCase();
            }
            where += key + ": \"" + options[key] + "\"\n";
        }
        var query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query ReputationSearch {\n      reps\n      ", "\n      {\n        id\n      }\n    }"], ["query ReputationSearch {\n      reps\n      ", "\n      {\n        id\n      }\n    }"])), index_1.createGraphQlQuery(options, where));
        return context.getObservableList(context, query, function (arc, r, queriedId) { return new Reputation(arc, r.id); }, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
    };
    Reputation.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["query ReputationState\n    {\n      rep (id: \"", "\") {\n        id\n        totalSupply\n        dao {\n          id\n        }\n      }\n    }"], ["query ReputationState\n    {\n      rep (id: \"", "\") {\n        id\n        totalSupply\n        dao {\n          id\n        }\n      }\n    }"])), this.address.toLowerCase());
        return this.context.getObservableObject(this.context, query, Reputation.itemMap, this.address.toLowerCase(), apolloQueryOptions);
    };
    Reputation.prototype.reputationOf = function (address) {
        index_1.isAddress(address);
        var query = graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["query ReputationHolderReputation {\n      reputationHolders (\n        where: { address:\"", "\",\n        contract: \"", "\"}\n      )\n      {\n        id, address, balance,contract\n      }\n    }"], ["query ReputationHolderReputation {\n      reputationHolders (\n        where: { address:\"", "\",\n        contract: \"", "\"}\n      )\n      {\n        id, address, balance,contract\n      }\n    }"])), address, this.address);
        return this.context.getObservable(query).pipe(operators_1.map(function (r) { return r.data.reputationHolders; }), operators_1.map(function (items) {
            var item = items.length > 0 && items[0];
            return item.balance !== undefined ? new bn_js_1.default(item.balance) : new bn_js_1.default(0);
        }));
    };
    Reputation.prototype.contract = function () {
        return this.context.getContract(this.address);
    };
    Reputation.prototype.mint = function (beneficiary, amount) {
        var _this = this;
        var mapReceipt = function (receipt) { return undefined; };
        var errorHandler = function (err) { return __awaiter(_this, void 0, void 0, function () {
            var contract, sender, owner;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        contract = this.contract();
                        return [4 /*yield*/, contract.signer.getAddress()];
                    case 1:
                        sender = _a.sent();
                        return [4 /*yield*/, contract.owner()];
                    case 2:
                        owner = _a.sent();
                        if (owner.toLowerCase() !== sender.toLowerCase()) {
                            return [2 /*return*/, Error("Minting failed: sender " + sender + " is not the owner of the contract at " + contract._address +
                                    ("(which is " + owner + ")"))];
                        }
                        return [2 /*return*/, err];
                }
            });
        }); };
        var transaction = {
            contract: this.contract(),
            method: 'mint',
            args: [beneficiary, amount.toString()]
        };
        return this.context.sendTransaction(transaction, mapReceipt, errorHandler);
    };
    Reputation.itemMap = function (context, item, queriedId) {
        if (!item) {
            throw Error("Reputation ItemMap failed. " + (queriedId && "Could not find Reputation with id '" + queriedId + "'"));
        }
        return {
            id: item.id,
            address: item.id,
            dao: {
                id: item.dao.id,
                entity: new index_1.DAO(context, item.dao.id)
            },
            totalSupply: new bn_js_1.default(item.totalSupply)
        };
    };
    return Reputation;
}(index_1.Entity));
exports.Reputation = Reputation;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=reputation.js.map