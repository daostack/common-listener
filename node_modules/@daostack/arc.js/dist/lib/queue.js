"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bn_js_1 = __importDefault(require("bn.js"));
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var index_1 = require("./index");
var Queue = /** @class */ (function (_super) {
    __extends(Queue, _super);
    function Queue(context, idOrOpts, dao) {
        var _this = _super.call(this, context, idOrOpts) || this;
        _this.dao = dao;
        _this.context = context;
        if (typeof idOrOpts === 'string') {
            _this.id = idOrOpts;
        }
        else {
            _this.id = idOrOpts.id;
            _this.setState(idOrOpts);
        }
        return _this;
    }
    Queue.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a;
        if (!options.where) {
            options.where = {};
        }
        var where = '';
        for (var _i = 0, _b = Object.keys(options.where); _i < _b.length; _i++) {
            var key = _b[_i];
            if (options[key] === undefined) {
                continue;
            }
            if (key === 'dao' || key === 'votingMaching' || key === 'scheme') {
                var option = options[key];
                index_1.isAddress(option);
                options[key] = option.toLowerCase();
            }
            where += key + ": \"" + options[key] + "\"\n";
        }
        // use the following query once https://github.com/daostack/subgraph/issues/217 is resolved
        var query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query QueueSearch\n      {\n        gpqueues ", " {\n          id\n          dao {\n            id\n          }\n          scheme {\n            ...PluginFields\n          }\n        }\n      }\n\n      ", "\n    "], ["query QueueSearch\n      {\n        gpqueues ", " {\n          id\n          dao {\n            id\n          }\n          scheme {\n            ...PluginFields\n          }\n        }\n      }\n\n      ", "\n    "])), index_1.createGraphQlQuery(options, where), index_1.Plugin.baseFragment);
        var itemMap = function (arc, item, queriedId) {
            return new Queue(arc, item.id, new index_1.DAO(arc, item.dao.id));
        };
        return context.getObservableList(context, query, itemMap, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
    };
    Queue.itemMap = function (context, item, queriedId) {
        if (!item) {
            throw Error("Queue ItemMap failed. " + (queriedId && "Could not find Queue with id '" + queriedId + "'"));
        }
        var threshold = index_1.realMathToNumber(new bn_js_1.default(item.threshold));
        var pluginState = index_1.Plugins[item.scheme.name].itemMap(context, item.scheme, queriedId);
        if (!pluginState) {
            throw new Error('Queue\'s plugin state is null');
        }
        var plugin = new index_1.Plugins[item.scheme.name](context, pluginState);
        var dao = new index_1.DAO(context, item.dao.id);
        return {
            dao: {
                id: dao.id,
                entity: dao
            },
            id: item.id,
            name: item.scheme.name,
            plugin: {
                id: item.scheme.id,
                entity: plugin
            },
            threshold: threshold,
            votingMachine: item.votingMachine
        };
    };
    Queue.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["query QueueState\n      {\n        gpqueue (id: \"", "\") {\n          id\n          dao {\n            id\n          }\n          scheme {\n            ...PluginFields\n          }\n          votingMachine\n          threshold\n        }\n      }\n      ", "\n    "], ["query QueueState\n      {\n        gpqueue (id: \"", "\") {\n          id\n          dao {\n            id\n          }\n          scheme {\n            ...PluginFields\n          }\n          votingMachine\n          threshold\n        }\n      }\n      ", "\n    "])), this.id, index_1.Plugin.baseFragment);
        return this.context.getObservableObject(this.context, query, Queue.itemMap, this.id, apolloQueryOptions);
    };
    return Queue;
}(index_1.Entity));
exports.Queue = Queue;
var templateObject_1, templateObject_2;
//# sourceMappingURL=queue.js.map