"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bn_js_1 = __importDefault(require("bn.js"));
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var index_1 = require("./index");
var Token = /** @class */ (function (_super) {
    __extends(Token, _super);
    function Token(context, idOrOpts) {
        var _this = _super.call(this, context, idOrOpts) || this;
        if (typeof idOrOpts === 'string') {
            index_1.isAddress(idOrOpts);
            _this.address = idOrOpts;
            _this.id = idOrOpts;
        }
        else {
            index_1.isAddress(idOrOpts.address);
            _this.address = idOrOpts.address;
            _this.id = idOrOpts.address;
            _this.setState(idOrOpts);
        }
        return _this;
    }
    Token.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a;
        if (!options.where) {
            options.where = {};
        }
        var where = '';
        for (var _i = 0, _b = Object.keys(options.where); _i < _b.length; _i++) {
            var key = _b[_i];
            if (options[key] === undefined) {
                continue;
            }
            if (key === 'token' || key === 'owner' || key === 'spender') {
                var option = options[key];
                index_1.isAddress(option);
                options[key] = option.toLowerCase();
            }
            where += key + ": \"" + options[key] + "\"\n";
        }
        var query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query TokenSearch\n    {\n      tokens ", " {\n        id\n      }\n    }"], ["query TokenSearch\n    {\n      tokens ", " {\n        id\n      }\n    }"])), index_1.createGraphQlQuery(options, where));
        return context.getObservableList(context, query, function (arc, r, queriedId) { return new Token(arc, r.id); }, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
    };
    Token.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["query tokenState {\n      token(id: \"", "\") {\n        id,\n        dao {\n          id\n        },\n        name,\n        symbol,\n        totalSupply\n      }\n    }"], ["query tokenState {\n      token(id: \"", "\") {\n        id,\n        dao {\n          id\n        },\n        name,\n        symbol,\n        totalSupply\n      }\n    }"])), this.address.toLowerCase());
        return this.context.getObservableObject(this.context, query, Token.itemMap, this.address.toLowerCase(), apolloQueryOptions);
    };
    Token.prototype.contract = function () {
        return this.context.getContract(this.address);
    };
    Token.prototype.balanceOf = function (owner) {
        var _this = this;
        var errHandler = function (err) { return __awaiter(_this, void 0, void 0, function () {
            var code;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(err.message.match(/Returned values aren't valid/g) && this.context.web3)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.context.web3.getCode(this.address)];
                    case 1:
                        code = _a.sent();
                        if (code === '0x') {
                            return [2 /*return*/, new Error("Cannot get balanceOf(): there is no contract at this address " + this.address)];
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, err];
                }
            });
        }); };
        var observable = rxjs_1.Observable.create(function (observer) { return __awaiter(_this, void 0, void 0, function () {
            var contract_1, toFilter_1, onTransferTo_1, fromFilter_1, onTransferFrom_1, unsubscribe_1, subscribe, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        contract_1 = this.contract();
                        toFilter_1 = contract_1.filters.Transfer(null, owner);
                        onTransferTo_1 = function (data) {
                            contract_1.balanceOf(owner).then(function (newBalance) {
                                observer.next(new bn_js_1.default(newBalance.toString()));
                            });
                        };
                        fromFilter_1 = contract_1.filters.Transfer(owner);
                        onTransferFrom_1 = function (data) {
                            contract_1.balanceOf(owner).then(function (newBalance) {
                                observer.next(new bn_js_1.default(newBalance.toString()));
                            });
                        };
                        unsubscribe_1 = function () {
                            contract_1.removeListener(toFilter_1, onTransferTo_1);
                            contract_1.removeListener(fromFilter_1, onTransferFrom_1);
                        };
                        subscribe = function () {
                            return contract_1
                                .balanceOf(owner)
                                .then(function (balance) {
                                if (!balance) {
                                    observer.error("balanceOf " + owner + " returned null");
                                }
                                observer.next(new bn_js_1.default(balance.toString()));
                                contract_1.on(toFilter_1, onTransferTo_1);
                                contract_1.on(fromFilter_1, onTransferFrom_1);
                            })
                                .catch(function (err) { return __awaiter(_this, void 0, void 0, function () {
                                var _a, _b, _c, _d;
                                return __generator(this, function (_e) {
                                    switch (_e.label) {
                                        case 0:
                                            if (!err.message.match(/connection not open/g)) return [3 /*break*/, 2];
                                            _b = (_a = observer).error;
                                            return [4 /*yield*/, errHandler(err)];
                                        case 1:
                                            _b.apply(_a, [_e.sent()]);
                                            return [3 /*break*/, 4];
                                        case 2:
                                            _d = (_c = observer).error;
                                            return [4 /*yield*/, errHandler(err)];
                                        case 3:
                                            _d.apply(_c, [_e.sent()]);
                                            _e.label = 4;
                                        case 4: return [2 /*return*/];
                                    }
                                });
                            }); });
                        };
                        return [4 /*yield*/, subscribe()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, function () { return unsubscribe_1(); }];
                    case 2:
                        e_1 = _a.sent();
                        return [2 /*return*/, observer.error(e_1)];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        observable.first = function () { return observable.pipe(operators_1.first()).toPromise(); };
        return observable;
    };
    Token.prototype.allowance = function (owner, spender) {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) { return __awaiter(_this, void 0, void 0, function () {
            var contract, filter, onApproval;
            return __generator(this, function (_a) {
                contract = this.contract();
                filter = contract.filters.Approval(owner);
                onApproval = function () {
                    // const newBalance = data.returnValues.value
                    contract.allowance(owner, spender).then(function (newBalance) {
                        observer.next(new bn_js_1.default(newBalance.toString()));
                    });
                };
                contract
                    .allowance(owner, spender)
                    .then(function (balance) {
                    if (!balance) {
                        observer.error("balanceOf " + owner + " returned null");
                    }
                    observer.next(new bn_js_1.default(balance.toString()));
                    contract.on(filter, onApproval);
                })
                    .catch(function (err) {
                    observer.error(err);
                });
                return [2 /*return*/, function () {
                        contract.removeListener(filter, onApproval);
                    }];
            });
        }); });
    };
    Token.prototype.mint = function (beneficiary, amount) {
        return this.context.sendTransaction({
            contract: this.contract(),
            method: 'mint',
            args: [beneficiary, amount.toString()]
        });
    };
    Token.prototype.transfer = function (beneficiary, amount) {
        return this.context.sendTransaction({
            contract: this.contract(),
            method: 'transfer',
            args: [beneficiary, amount.toString()]
        });
    };
    Token.prototype.approveForStaking = function (spender, amount) {
        return this.context.sendTransaction({
            contract: this.contract(),
            method: 'approve',
            args: [spender, amount.toString()]
        });
    };
    Token.itemMap = function (context, item, queriedId) {
        if (!item) {
            throw Error("Token ItemMap failed. " + (queriedId && "Could not find Token with id '" + queriedId + "'"));
        }
        return {
            id: item.id,
            address: item.id,
            name: item.name,
            owner: item.dao.id,
            symbol: item.symbol,
            totalSupply: new bn_js_1.default(item.totalSupply)
        };
    };
    return Token;
}(index_1.Entity));
exports.Token = Token;
var templateObject_1, templateObject_2;
//# sourceMappingURL=token.js.map