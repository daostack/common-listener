"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bn_js_1 = __importDefault(require("bn.js"));
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var index_1 = require("./index");
var Vote = /** @class */ (function (_super) {
    __extends(Vote, _super);
    function Vote() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Vote.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a, _b;
        if (!options.where) {
            options.where = {};
        }
        var proposalId = options.where.proposal;
        var itemMap = function (arc, item, queriedId) {
            var state = Vote.itemMap(arc, item, queriedId);
            return new Vote(arc, state);
        };
        // if we are searching for votes of a specific proposal (a common case), we
        // will structure the query so that votes are stored in the cache together wit the proposal
        if (proposalId) {
            delete options.where.proposal;
        }
        var where = '';
        for (var _i = 0, _c = Object.keys(options.where); _i < _c.length; _i++) {
            var key = _c[_i];
            if (options.where[key] === undefined) {
                continue;
            }
            if (key === 'voter' || key === 'dao') {
                var option = options.where[key];
                index_1.isAddress(option);
                options.where[key] = option.toLowerCase();
            }
            if (key === 'outcome') {
                where += key + ": \"" + index_1.IProposalOutcome[options.where[key]] + "\"\n";
            }
            else {
                where += key + ": \"" + options.where[key] + "\"\n";
            }
        }
        var query;
        // if we are searching for votes of a specific proposal (a common case), we
        // will structure the query so that votes are stored in the cache together with the proposal
        // if (options.where.proposal && !options.where.id) {
        if (proposalId && !options.where.id) {
            query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query ProposalVotesSearchFromProposal\n        {\n          proposal (id: \"", "\") {\n            id\n            scheme {\n              id\n              name\n            }\n            votes ", " {\n              ...VoteFields\n            }\n          }\n        }\n        ", "\n      "], ["query ProposalVotesSearchFromProposal\n        {\n          proposal (id: \"", "\") {\n            id\n            scheme {\n              id\n              name\n            }\n            votes ",
                " {\n              ...VoteFields\n            }\n          }\n        }\n        ", "\n      "])), proposalId, index_1.createGraphQlQuery({ where: __assign(__assign({}, options.where), { proposal: undefined }) }, where), Vote.fragments.VoteFields);
            return context.getObservableObject(context, query, function (arc, r, queriedId) {
                if (!r) {
                    // no such proposal was found
                    return [];
                }
                var votes = r.votes;
                var itemMapper = function (item) {
                    var state = Vote.itemMap(arc, item, queriedId);
                    return new Vote(arc, state);
                };
                return votes.map(itemMapper);
            }, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
        }
        else {
            query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["query ProposalVotesSearch\n        {\n          proposalVotes ", " {\n            ...VoteFields\n          }\n        }\n        ", "\n      "], ["query ProposalVotesSearch\n        {\n          proposalVotes ", " {\n            ...VoteFields\n          }\n        }\n        ", "\n      "])), index_1.createGraphQlQuery(options, where), Vote.fragments.VoteFields);
            return context.getObservableList(context, query, itemMap, (_b = options.where) === null || _b === void 0 ? void 0 : _b.id, apolloQueryOptions);
        }
    };
    Vote.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["query ProposalVoteById {\n      proposalVote (id: \"", "\") {\n        ...VoteFields\n      }\n    }\n    ", "\n    "], ["query ProposalVoteById {\n      proposalVote (id: \"", "\") {\n        ...VoteFields\n      }\n    }\n    ", "\n    "])), this.id, Vote.fragments.VoteFields);
        return this.context.getObservableObject(this.context, query, Vote.itemMap, this.id, apolloQueryOptions);
    };
    Vote.fragments = {
        VoteFields: graphql_tag_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n      fragment VoteFields on ProposalVote {\n        id\n        createdAt\n        dao {\n          id\n        }\n        voter\n        proposal {\n          id\n          scheme {\n            id\n            name\n          }\n        }\n        outcome\n        reputation\n      }\n    "], ["\n      fragment VoteFields on ProposalVote {\n        id\n        createdAt\n        dao {\n          id\n        }\n        voter\n        proposal {\n          id\n          scheme {\n            id\n            name\n          }\n        }\n        outcome\n        reputation\n      }\n    "])))
    };
    Vote.itemMap = function (context, item, queriedId) {
        if (!item) {
            throw Error("Vote ItemMap failed. " + (queriedId && "Could not find Vote with id '" + queriedId + "'"));
        }
        var outcome = index_1.IProposalOutcome.Pass;
        if (item.outcome === 'Pass') {
            outcome = index_1.IProposalOutcome.Pass;
        }
        else if (item.outcome === 'Fail') {
            outcome = index_1.IProposalOutcome.Fail;
        }
        else {
            throw new Error("Unexpected value for proposalVote.outcome: " + item.outcome);
        }
        return {
            amount: new bn_js_1.default(item.reputation || 0),
            createdAt: item.createdAt,
            dao: item.dao.id,
            id: item.id,
            outcome: outcome,
            proposal: {
                id: item.proposal.id,
                entity: new index_1.Proposals[item.proposal.scheme.name](context, item.proposal.id)
            },
            voter: item.voter
        };
    };
    return Vote;
}(index_1.Entity));
exports.Vote = Vote;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=vote.js.map