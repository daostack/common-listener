"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var index_1 = require("./index");
var Tag = /** @class */ (function (_super) {
    __extends(Tag, _super);
    function Tag() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Tag.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a, _b;
        if (!options.where) {
            options.where = {};
        }
        var where = '';
        var itemMap = function (arc, item, queriedId) {
            var state = Tag.itemMap(arc, item, queriedId);
            return new Tag(arc, state);
        };
        var proposalId = options.where.proposal;
        // if we are searching for stakes on a specific proposal (a common case), we
        // will structure the query so that stakes are stored in the cache together wit the proposal
        if (proposalId) {
            delete options.where.proposal;
        }
        for (var _i = 0, _c = Object.keys(options.where); _i < _c.length; _i++) {
            var key = _c[_i];
            if (options.where[key] === undefined) {
                continue;
            }
            where += key + ": \"" + options.where[key] + "\"\n";
        }
        var query;
        if (proposalId) {
            query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query TagsSearchFromProposal\n        {\n          proposal (id: \"", "\") {\n            id\n            scheme {\n              id\n              name\n            }\n            tags ", " {\n              ...TagFields\n            }\n          }\n        }\n        ", "\n      "], ["query TagsSearchFromProposal\n        {\n          proposal (id: \"", "\") {\n            id\n            scheme {\n              id\n              name\n            }\n            tags ", " {\n              ...TagFields\n            }\n          }\n        }\n        ", "\n      "])), proposalId, index_1.createGraphQlQuery(options, where), Tag.fragments.TagFields);
            return context.getObservableObject(context, query, function (arc, r, queriedId) {
                if (!r) {
                    // no such proposal was found
                    return [];
                }
                var itemMapper = function (item) {
                    var state = Tag.itemMap(arc, item, queriedId);
                    return new Tag(arc, state);
                };
                return r.tags.map(itemMapper);
            }, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
        }
        else {
            query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["query TagsSearch\n        {\n          tags ", " {\n              ...TagFields\n          }\n        }\n        ", "\n      "], ["query TagsSearch\n        {\n          tags ", " {\n              ...TagFields\n          }\n        }\n        ", "\n      "])), index_1.createGraphQlQuery(options, where), Tag.fragments.TagFields);
            return context.getObservableList(context, query, itemMap, (_b = options.where) === null || _b === void 0 ? void 0 : _b.id, apolloQueryOptions);
        }
    };
    Tag.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["query TagState\n      {\n        tag (id: \"", "\") {\n          ...TagFields\n        }\n      }\n      ", "\n    "], ["query TagState\n      {\n        tag (id: \"", "\") {\n          ...TagFields\n        }\n      }\n      ", "\n    "])), this.id, Tag.fragments.TagFields);
        return this.context.getObservableObject(this.context, query, Tag.itemMap, this.id, apolloQueryOptions);
    };
    Tag.fragments = {
        TagFields: graphql_tag_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n      fragment TagFields on Tag {\n        id\n        numberOfProposals\n        proposals {\n          id\n          scheme {\n            id\n            name\n          }\n        }\n      }\n    "], ["\n      fragment TagFields on Tag {\n        id\n        numberOfProposals\n        proposals {\n          id\n          scheme {\n            id\n            name\n          }\n        }\n      }\n    "])))
    };
    Tag.itemMap = function (context, item, queriedId) {
        if (!item) {
            throw Error("Tag ItemMap failed. " + (queriedId && "Could not find Tag with id '" + queriedId + "'"));
        }
        return {
            id: item.id,
            numberOfProposals: Number(item.numberOfProposals),
            proposals: item.proposals.map(function (proposal) {
                return {
                    id: proposal.id,
                    entity: new index_1.Proposals[proposal.scheme.name](context, proposal.id)
                };
            })
        };
    };
    return Tag;
}(index_1.Entity));
exports.Tag = Tag;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=tag.js.map