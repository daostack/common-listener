"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var index_1 = require("./index");
var Event = /** @class */ (function (_super) {
    __extends(Event, _super);
    function Event() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Event.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a;
        var itemMap = function (arc, item, queriedId) {
            var state = Event.itemMap(arc, item, queriedId);
            return new Event(arc, state);
        };
        var query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query EventSearch {\n        events ", "\n        {\n          ...EventFields\n        }\n      }\n      ", "\n    "], ["query EventSearch {\n        events ", "\n        {\n          ...EventFields\n        }\n      }\n      ", "\n    "])), index_1.createGraphQlQuery(options), Event.fragments.EventFields);
        return context.getObservableList(context, query, itemMap, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
    };
    Event.itemMap = function (context, item, queriedId) {
        if (!item) {
            throw Error("Event ItemMap failed. " + (queriedId && "Could not find Event with id '" + queriedId + "'"));
        }
        return {
            dao: item.dao.id,
            data: JSON.parse(item.data),
            id: item.id,
            proposal: item.proposal && item.proposal.id,
            timestamp: item.timestamp,
            type: item.type,
            user: item.user
        };
    };
    Event.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      query EventState {\n        event (id: \"", "\")\n        {\n          ...EventFields\n        }\n      }\n      ", "\n    "], ["\n      query EventState {\n        event (id: \"", "\")\n        {\n          ...EventFields\n        }\n      }\n      ", "\n    "])), this.id, Event.fragments.EventFields);
        return this.context.getObservableObject(this.context, query, Event.itemMap, this.id, apolloQueryOptions);
    };
    Event.fragments = {
        EventFields: graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      fragment EventFields on Event {\n        id\n        dao {\n          id\n        }\n        type\n        data\n        user\n        proposal {\n          id\n        }\n        timestamp\n      }\n    "], ["\n      fragment EventFields on Event {\n        id\n        dao {\n          id\n        }\n        type\n        data\n        user\n        proposal {\n          id\n        }\n        timestamp\n      }\n    "])))
    };
    return Event;
}(index_1.Entity));
exports.Event = Event;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=event.js.map