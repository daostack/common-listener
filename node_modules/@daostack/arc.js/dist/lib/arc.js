"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bn_js_1 = __importDefault(require("bn.js"));
var ethers_1 = require("ethers");
var ethers_2 = require("ethers");
require("ethers/dist/shims");
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var rxjs_1 = require("rxjs");
var index_1 = require("./index");
var abis = require('./abis/abis.json');
/**
 * The Arc class holds all configuration.
 * Any useage of the library typically will start with instantiating a new Arc instance
 * @return an instance of Arc
 */
var Arc = /** @class */ (function (_super) {
    __extends(Arc, _super);
    function Arc(options) {
        var _this = _super.call(this, {
            errHandler: options.errHandler,
            graphqlHttpProvider: options.graphqlHttpProvider,
            graphqlSubscribeToQueries: options.graphqlSubscribeToQueries,
            graphqlWsProvider: options.graphqlWsProvider,
            prefetchHook: options.prefetchHook,
            retryLink: options.retryLink
        }) || this;
        _this.defaultAccount = undefined;
        _this.pendingOperations = rxjs_1.of();
        _this.ipfs = undefined;
        // accounts observed by ethBalance
        _this.observedAccounts = {};
        _this._web3Provider = '';
        _this._web3 = undefined;
        _this.ipfsProvider = options.ipfsProvider || '';
        if (options.web3Provider) {
            _this.setWeb3(options.web3Provider);
        }
        _this.contractInfos = options.contractInfos || [];
        if (!_this.contractInfos) {
            index_1.Logger.warn('No contract addresses given to the Arc.constructor: expect most write operations to fail!');
        }
        if (_this.ipfsProvider) {
            _this.ipfs = new index_1.IPFSClient(_this.ipfsProvider);
        }
        // by default, we do not subscribe to queries
        if (options.graphqlSubscribeToQueries === undefined) {
            options.graphqlSubscribeToQueries = false;
        }
        return _this;
    }
    Object.defineProperty(Arc.prototype, "web3Provider", {
        get: function () {
            return this._web3Provider;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Arc.prototype, "web3", {
        get: function () {
            return this._web3;
        },
        enumerable: true,
        configurable: true
    });
    Arc.prototype.setWeb3 = function (provider) {
        if (typeof provider === 'string') {
            this._web3 = new ethers_2.providers.JsonRpcProvider(provider);
        }
        else if (ethers_1.Signer.isSigner(provider)) {
            var signer = provider;
            if (!signer.provider) {
                throw Error('Ethers Signer is missing a provider, please set one. More info here: https://docs.ethers.io/ethers.js/html/api-wallet.html');
            }
            this._web3 = signer.provider;
            this.defaultAccount = signer;
        }
        else {
            this._web3 = new ethers_2.providers.Web3Provider(provider);
        }
        this._web3Provider = provider;
    };
    Arc.prototype.getDefaultAddress = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!ethers_1.Signer.isSigner(this.defaultAccount)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.defaultAccount.getAddress()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, this.defaultAccount];
                }
            });
        });
    };
    /**
     * set the contract addresses
     * @param  contractInfos a list of IContractInfo objects
     * @return
     */
    Arc.prototype.setContractInfos = function (contractInfos) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.contractInfos = contractInfos;
                return [2 /*return*/];
            });
        });
    };
    /**
     * fetch contractInfos from the subgraph
     * @return a list of IContractInfo instances
     */
    Arc.prototype.fetchContractInfos = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var query, response, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      query AllContractInfos {\n        contractInfos(first: 1000) {\n          id\n          name\n          version\n          address\n        }\n      }\n    "], ["\n      query AllContractInfos {\n        contractInfos(first: 1000) {\n          id\n          name\n          version\n          address\n        }\n      }\n    "
                            // const result = await this.getObservableList(query, itemMap, apolloQueryOptions).pipe(first()).toPromise()
                        ])));
                        return [4 /*yield*/, this.sendQuery(query, apolloQueryOptions)];
                    case 1:
                        response = _a.sent();
                        result = response.data.contractInfos;
                        this.setContractInfos(result);
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * get a DAO instance from an address
     * @param  address address of the dao Avatar
     * @return an instance of a DAO
     */
    Arc.prototype.dao = function (address) {
        index_1.isAddress(address);
        return new index_1.DAO(this, address);
    };
    /**
     * return an observable of the list of DAOs
     * @param options options to pass on to the query
     * @return [description]
     */
    Arc.prototype.daos = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        return index_1.DAO.search(this, options, apolloQueryOptions);
    };
    Arc.prototype.tags = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        return index_1.Tag.search(this, options, apolloQueryOptions);
    };
    Arc.prototype.plugin = function (id, name) {
        return new index_1.Plugins[name](this, id);
    };
    Arc.prototype.plugins = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        return index_1.Plugin.search(this, options, apolloQueryOptions);
    };
    Arc.prototype.proposals = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        return index_1.Proposal.search(this, options, apolloQueryOptions);
    };
    Arc.prototype.events = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        return index_1.Event.search(this, options, apolloQueryOptions);
    };
    Arc.prototype.rewards = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        return index_1.Reward.search(this, options, apolloQueryOptions);
    };
    Arc.prototype.stakes = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        return index_1.Stake.search(this, options, apolloQueryOptions);
    };
    Arc.prototype.ethBalance = function (owner) {
        var _this = this;
        if (!this.observedAccounts[owner]) {
            this.observedAccounts[owner] = {
                subscriptionsCount: 1
            };
        }
        if (this.observedAccounts[owner].observable) {
            this.observedAccounts[owner].subscriptionsCount += 1;
            return this.observedAccounts[owner].observable;
        }
        var observable = rxjs_1.Observable.create(function (observer) {
            _this.observedAccounts[owner].observer = observer;
            // get the current balance and return it
            if (!_this.web3) {
                throw new Error('Web3 provider not defined');
            }
            _this.web3
                .getBalance(owner)
                .then(function (currentBalance) {
                var balance = currentBalance.toString();
                var obs = _this.observedAccounts[owner].observer;
                obs.next(new bn_js_1.default(balance));
                _this.observedAccounts[owner].lastBalance = balance;
            })
                .catch(function (err) { return observer.error(err); });
            // called whenever the account balance changes
            var onBalanceChange = function (balance) {
                var accInfo = _this.observedAccounts[owner];
                if (accInfo && balance.toString() !== accInfo.lastBalance) {
                    accInfo.observer.next(new bn_js_1.default(balance.toString()));
                    accInfo.lastBalance = balance.toString();
                }
            };
            _this.web3.on(owner, onBalanceChange);
            // unsubscribe
            return function () {
                _this.observedAccounts[owner].subscriptionsCount -= 1;
                if (_this.observedAccounts[owner].subscriptionsCount <= 0) {
                    if (_this.web3) {
                        _this.web3.removeListener(owner, onBalanceChange);
                    }
                    delete _this.observedAccounts[owner];
                }
            };
        });
        this.observedAccounts[owner].observable = observable;
        return observable;
    };
    /**
     * return information about the contract
     * @param  address [description]
     * @return      an IContractInfo instance
     */
    Arc.prototype.getContractInfo = function (address) {
        index_1.isAddress(address);
        for (var _i = 0, _a = this.contractInfos; _i < _a.length; _i++) {
            var contractInfo = _a[_i];
            if (contractInfo.address.toLowerCase() === address.toLowerCase()) {
                return contractInfo;
            }
        }
        if (!this.contractInfos) {
            throw Error("no contract info was found - did you call \"arc.setContractInfos()\"?");
        }
        throw Error("No contract with address " + address + " is known");
    };
    Arc.prototype.getContractInfoByName = function (name, version) {
        for (var _i = 0, _a = this.contractInfos; _i < _a.length; _i++) {
            var contractInfo = _a[_i];
            if (contractInfo.name === name && contractInfo.version === version) {
                return contractInfo;
            }
        }
        if (!this.contractInfos) {
            throw Error("no contract info was found - did you call \"arc.setContractInfos(...)\"?");
        }
        throw Error("No contract with name " + name + "  and version " + version + " is known");
    };
    Arc.prototype.getABI = function (opts) {
        if (Object.values(opts).filter(function (value) { return value !== undefined; }).length === 0) {
            throw Error('getABI needs at least one parameter passed');
        }
        var address = opts.address;
        var abiName = opts.abiName, version = opts.version;
        if ((address && !abiName) || !version) {
            var contractInfo = this.getContractInfo(address);
            abiName = contractInfo.name;
            version = contractInfo.version;
            if (abiName === 'GEN') {
                abiName = 'DAOToken';
            }
        }
        var artefact = abis[version][abiName || ''];
        if (artefact.rootVersion) {
            artefact = abis[artefact.rootVersion][abiName || ''];
        }
        return artefact.abi;
    };
    /**
     * return a web3 Contract instance.
     * @param  address address of the contract to look up in self.contractInfos
     * @param  [abiName] (optional) name of the ABI (i.e. 'Avatar' or 'SchemeRegistrar').
     * @param  [version] (optional) Arc version of contract (https://www.npmjs.com/package/@daostack/arc)
     * @return   a web3 contract instance
     */
    Arc.prototype.getContract = function (address, abi) {
        if (!abi) {
            abi = this.getABI({ address: address });
        }
        if (!this.web3) {
            throw new Error('Web3 provider not set');
        }
        if (ethers_1.Signer.isSigner(this.defaultAccount)) {
            return new ethers_1.Contract(address, abi, this.defaultAccount);
        }
        else {
            return new ethers_1.Contract(address, abi, this.web3.getSigner(this.defaultAccount));
        }
    };
    /**
     * get the GEN Token
     * @return a Token instance
     */
    Arc.prototype.GENToken = function () {
        if (this.contractInfos) {
            for (var _i = 0, _a = this.contractInfos; _i < _a.length; _i++) {
                var contractInfo = _a[_i];
                if (contractInfo.name === 'GEN') {
                    return new index_1.Token(this, contractInfo.address);
                }
            }
            throw Error("Cannot find address of GEN Token - did you call setContractInfos?");
        }
        else {
            throw Error("No contract addresses known - did you run arc.setContractInfos()?");
        }
    };
    Arc.prototype.getAccount = function () {
        var _this = this;
        // this complex logic is to get the correct account both from the Web3 as well as from the Metamaask provider
        // This polls for changes. But polling is Evil!
        // cf. https://github.com/MetaMask/faq/blob/master/DEVELOPERS.md#ear-listening-for-selected-account-changes
        return rxjs_1.Observable.create(function (observer) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b, interval, account_1, prevAccount_1, web3_1, timeout_1;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!ethers_1.Signer.isSigner(this.defaultAccount)) return [3 /*break*/, 2];
                        _b = (_a = observer).next;
                        return [4 /*yield*/, this.defaultAccount.getAddress()];
                    case 1:
                        _b.apply(_a, [_c.sent()]);
                        return [2 /*return*/, observer.complete()];
                    case 2:
                        interval = 1000 /// poll once a second
                        ;
                        web3_1 = this.web3;
                        if (this.defaultAccount) {
                            observer.next(this.defaultAccount);
                            prevAccount_1 = this.defaultAccount;
                        }
                        timeout_1 = setInterval(function () {
                            if (!web3_1) {
                                throw new Error('Web3 provider not set');
                            }
                            web3_1.listAccounts().then(function (accounts) {
                                if (_this.defaultAccount && typeof _this.defaultAccount === 'string') {
                                    account_1 = _this.defaultAccount;
                                }
                                else if (accounts) {
                                    account_1 = accounts[0];
                                }
                                if (prevAccount_1 !== account_1 && account_1) {
                                    observer.next(account_1);
                                    prevAccount_1 = account_1;
                                }
                            });
                        }, interval);
                        return [2 /*return*/, function () { return clearTimeout(timeout_1); }];
                }
            });
        }); });
    };
    Arc.prototype.setAccount = function (address) {
        if (ethers_1.Signer.isSigner(this.defaultAccount)) {
            throw Error('The account cannot be set post-initialization when a custom Signer is being used');
        }
        this.defaultAccount = address;
    };
    Arc.prototype.getSigner = function () {
        var _this = this;
        return rxjs_1.Observable.create(function (observer) {
            if (ethers_1.Signer.isSigner(_this.defaultAccount)) {
                observer.next(_this.defaultAccount);
                return observer.complete();
            }
            else {
                var subscription_1 = _this.getAccount().subscribe(function (address) {
                    if (!_this.web3) {
                        throw new Error('Web3 provider not set');
                    }
                    observer.next(_this.web3.getSigner(address));
                });
                return function () { return subscription_1.unsubscribe(); };
            }
        });
    };
    Arc.prototype.approveForStaking = function (spender, amount) {
        return this.GENToken().approveForStaking(spender, amount);
    };
    /**
     * How much GEN spender may spend on behalve of the owner
     * @param  owner Address of the owner of the tokens
     * @param  spender Address of the spender
     * @return
     */
    Arc.prototype.allowance = function (owner, spender) {
        return this.GENToken().allowance(owner, spender);
    };
    /**
     * send an Ethereum transaction
     * @param  transaction  [description]
     * @param  mapToObject  [description]
     * @param  errorHandler [description]
     * @return  An observable of
     */
    Arc.prototype.sendTransaction = function (transaction, mapToObject, errorHandler) {
        var _this = this;
        if (mapToObject === void 0) { mapToObject = function (receipt) { return undefined; }; }
        if (errorHandler === void 0) { errorHandler = function (err) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw err;
            });
        }); }; }
        return index_1.sendTransaction(this, transaction, mapToObject, errorHandler);
    };
    /**
     * save data of a proposal to IPFS, return  the IPFS hash
     * @param  options an Object to save. This object must have title, url and desction defined
     * @return  a Promise that resolves in the IPFS Hash where the file is saved
     */
    Arc.prototype.saveIPFSData = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var ipfsDataToSave, descriptionHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        ipfsDataToSave = {};
                        if (options.title || options.url || options.description || options.tags !== undefined) {
                            if (!this.ipfsProvider) {
                                throw Error("No ipfsProvider set on Arc instance - cannot save data on IPFS");
                            }
                            ipfsDataToSave = {
                                description: options.description,
                                tags: options.tags,
                                title: options.title,
                                url: options.url
                            };
                        }
                        index_1.Logger.debug('Saving data on IPFS...');
                        if (!this.ipfs) {
                            throw Error('IPFS provider not set');
                        }
                        return [4 /*yield*/, this.ipfs.addString(JSON.stringify(ipfsDataToSave))
                            // pin the file
                        ];
                    case 1:
                        descriptionHash = _a.sent();
                        // pin the file
                        return [4 /*yield*/, this.ipfs.pinHash(descriptionHash)];
                    case 2:
                        // pin the file
                        _a.sent();
                        index_1.Logger.debug("Data saved successfully as " + descriptionHash);
                        return [2 /*return*/, descriptionHash];
                }
            });
        });
    };
    return Arc;
}(index_1.GraphNodeObserver));
exports.Arc = Arc;
var templateObject_1;
//# sourceMappingURL=arc.js.map