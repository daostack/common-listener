"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var index_1 = require("../../index");
var CompetitionProposal = /** @class */ (function (_super) {
    __extends(CompetitionProposal, _super);
    function CompetitionProposal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mapReceipt = function (receipt) { return __awaiter(_this, void 0, void 0, function () {
            var args, suggestionId;
            return __generator(this, function (_a) {
                args = index_1.getEventArgs(receipt, 'NewSuggestion', 'Competition.createSuggestion');
                suggestionId = args[1];
                return [2 /*return*/, new index_1.CompetitionSuggestion(this.context, suggestionId)];
            });
        }); };
        _this.errorHandler = function (err) { return __awaiter(_this, void 0, void 0, function () {
            var pluginState, contract, proposal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getState()];
                    case 1:
                        pluginState = _a.sent();
                        contract = index_1.CompetitionPlugin.getCompetitionContract(this.context, pluginState);
                        return [4 /*yield*/, contract.proposals(this.id)];
                    case 2:
                        proposal = _a.sent();
                        if (!proposal) {
                            throw Error("A proposal with id " + this.id + " does not exist");
                        }
                        throw err;
                }
            });
        }); };
        return _this;
    }
    CompetitionProposal.itemMap = function (context, item, queriedId) {
        if (!item) {
            index_1.Logger.debug("CompetitionProposal ItemMap failed. " + (queriedId && "Could not find CompetitionProposal with id '" + queriedId + "'"));
            return null;
        }
        if (!item.contributionReward) {
            throw new Error("Unexpected proposal state: competition is set, but contributionReward is not");
        }
        var competitionState = index_1.ContributionRewardExtPlugin.itemMap(context, item.scheme, queriedId);
        if (!competitionState) {
            return null;
        }
        var competition = new index_1.CompetitionPlugin(context, competitionState);
        var competitionProposal = new CompetitionProposal(context, item.id);
        var baseState = index_1.Proposal.itemMapToBaseState(context, item, competition, competitionProposal, 'Competition');
        var crExtState = index_1.ContributionRewardExtProposal.itemMap(context, item, queriedId);
        if (baseState == null || crExtState == null) {
            return null;
        }
        return __assign(__assign(__assign({}, baseState), crExtState), { admin: item.competition.admin, contract: item.competition.contract, createdAt: index_1.secondSinceEpochToDate(item.competition.createdAt), endTime: index_1.secondSinceEpochToDate(item.competition.endTime), id: item.competition.id, numberOfVotesPerVoter: Number(item.competition.numberOfVotesPerVoters), numberOfWinners: Number(item.competition.numberOfWinners), numberOfWinningSuggestions: Number(item.competition.numberOfWinningSuggestions), rewardSplit: item.competition.rewardSplit.map(function (perc) { return Number(perc); }), plugin: {
                id: competition.id,
                entity: competition
            }, snapshotBlock: item.competition.snapshotBlock, startTime: index_1.secondSinceEpochToDate(item.competition.startTime), suggestionsEndTime: index_1.secondSinceEpochToDate(item.competition.suggestionsEndTime), totalSuggestions: Number(item.competition.totalSuggestions), totalVotes: Number(item.competition.totalVotes), votingStartTime: index_1.secondSinceEpochToDate(item.competition.votingStartTime) });
    };
    CompetitionProposal.prototype.state = function (apolloQueryOptions) {
        var query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query ProposalState\n      {\n        proposal(id: \"", "\") {\n          ...ProposalFields\n          votes {\n            id\n          }\n          stakes {\n            id\n          }\n        }\n      }\n      ", "\n      ", "\n    "], ["query ProposalState\n      {\n        proposal(id: \"", "\") {\n          ...ProposalFields\n          votes {\n            id\n          }\n          stakes {\n            id\n          }\n        }\n      }\n      ", "\n      ", "\n    "])), this.id, index_1.Proposal.baseFragment, index_1.Plugin.baseFragment);
        var result = this.context.getObservableObject(this.context, query, CompetitionProposal.itemMap, this.id, apolloQueryOptions);
        return result;
    };
    CompetitionProposal.prototype.redeemerContract = function () {
        for (var _i = 0, REDEEMER_CONTRACT_VERSIONS_1 = index_1.REDEEMER_CONTRACT_VERSIONS; _i < REDEEMER_CONTRACT_VERSIONS_1.length; _i++) {
            var version = REDEEMER_CONTRACT_VERSIONS_1[_i];
            try {
                var contractInfo = this.context.getContractInfoByName('Redeemer', version);
                return this.context.getContract(contractInfo.address);
            }
            catch (err) {
                if (!err.message.match(/no contract/i)) {
                    // if the contract cannot be found, try the next one
                    throw err;
                }
            }
        }
        throw Error("No Redeemer contract could be found (search for versions " + index_1.REDEEMER_CONTRACT_VERSIONS + ")");
    };
    CompetitionProposal.prototype.suggestions = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.proposal = this.id;
        return index_1.CompetitionSuggestion.search(this.context, options, apolloQueryOptions);
    };
    CompetitionProposal.prototype.competitionVotes = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.proposal = this.id;
        return index_1.CompetitionVote.search(this.context, options, apolloQueryOptions);
    };
    CompetitionProposal.prototype.redeemRewards = function (beneficiary) {
        var _this = this;
        var mapReceipt = function (receipt) { return true; };
        var createTransaction = function () { return __awaiter(_this, void 0, void 0, function () {
            var state, pluginAddress, method, args;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!beneficiary) {
                            beneficiary = index_1.NULL_ADDRESS;
                        }
                        return [4 /*yield*/, this.fetchState()];
                    case 1:
                        state = _a.sent();
                        return [4 /*yield*/, state.plugin.entity.fetchState()];
                    case 2:
                        pluginAddress = (_a.sent()).address;
                        method = 'redeemFromCRExt';
                        args = [pluginAddress, state.votingMachine, this.id, beneficiary];
                        return [2 /*return*/, {
                                contract: this.redeemerContract(),
                                method: method,
                                args: args
                            }];
                }
            });
        }); };
        var observable = rxjs_1.from(createTransaction()).pipe(operators_1.concatMap(function (transaction) {
            return _this.context.sendTransaction(transaction, mapReceipt);
        }));
        return index_1.toIOperationObservable(observable);
    };
    CompetitionProposal.prototype.createSuggestion = function (options) {
        var _this = this;
        var mapReceipt = function (receipt) { return __awaiter(_this, void 0, void 0, function () {
            var pluginState, args, suggestionId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getState()];
                    case 1:
                        pluginState = _a.sent();
                        args = index_1.getEventArgs(receipt, 'NewSuggestion', 'Competition.createSuggestion');
                        suggestionId = args[1];
                        return [2 /*return*/, new index_1.CompetitionSuggestion(this.context, {
                                plugin: pluginState.id,
                                suggestionId: suggestionId
                            })];
                }
            });
        }); };
        var errorHandler = function (err) { return __awaiter(_this, void 0, void 0, function () {
            var pluginState, contract, proposal;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getState()];
                    case 1:
                        pluginState = _a.sent();
                        contract = index_1.CompetitionPlugin.getCompetitionContract(this.context, pluginState);
                        return [4 /*yield*/, contract.proposals(this.id)];
                    case 2:
                        proposal = _a.sent();
                        if (!proposal) {
                            throw Error("A proposal with id " + this.id + " does not exist");
                        }
                        throw err;
                }
            });
        }); };
        var createTransaction = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, pluginState, contract, descriptionHash;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!options.beneficiary) return [3 /*break*/, 2];
                        _a = options;
                        return [4 /*yield*/, this.context.getAccount().pipe(operators_1.first()).toPromise()];
                    case 1:
                        _a.beneficiary = _b.sent();
                        _b.label = 2;
                    case 2: return [4 /*yield*/, this.getState()];
                    case 3:
                        pluginState = _b.sent();
                        contract = index_1.CompetitionPlugin.getCompetitionContract(this.context, pluginState);
                        return [4 /*yield*/, this.context.saveIPFSData(options)];
                    case 4:
                        descriptionHash = _b.sent();
                        return [2 /*return*/, {
                                contract: contract,
                                method: 'suggest',
                                args: [this.id, descriptionHash, options.beneficiary]
                            }];
                }
            });
        }); };
        var observable = rxjs_1.from(createTransaction()).pipe(operators_1.concatMap(function (transaction) {
            return _this.context.sendTransaction(transaction, mapReceipt, errorHandler);
        }));
        return index_1.toIOperationObservable(observable);
    };
    CompetitionProposal.prototype.voteSuggestion = function (options) {
        var _this = this;
        var mapReceipt = function (receipt) {
            var _a = index_1.getEventArgs(receipt, 'NewVote', 'Competition.voteSuggestion'), proposal = _a[0], suggestionId = _a[1], voter = _a[2], reputation = _a[3];
            var suggestion = index_1.CompetitionSuggestion.calculateId({
                plugin: _this.id,
                suggestionId: suggestionId
            });
            return new index_1.CompetitionVote(_this.context, {
                // TODO: where to get this ID?
                id: '',
                proposal: proposal,
                reputation: reputation,
                suggestion: suggestion,
                voter: voter
            });
        };
        var errorHandler = function (err) { return __awaiter(_this, void 0, void 0, function () {
            var pluginState, contract, suggestion, state, dao, reputation, sender, reputationOfUser;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getState()];
                    case 1:
                        pluginState = _a.sent();
                        return [4 /*yield*/, index_1.CompetitionPlugin.getCompetitionContract(this.context, pluginState)
                            // see if the suggestionId does exist in the contract
                        ];
                    case 2:
                        contract = _a.sent();
                        return [4 /*yield*/, contract.suggestions(options.suggestionId)];
                    case 3:
                        suggestion = _a.sent();
                        if (suggestion.proposalId ===
                            '0x0000000000000000000000000000000000000000000000000000000000000000') {
                            throw Error("A suggestion with suggestionId " + options.suggestionId + " does not exist");
                        }
                        return [4 /*yield*/, this.fetchState()];
                    case 4:
                        state = (_a.sent());
                        dao = new index_1.DAO(this.context, state.dao.id);
                        return [4 /*yield*/, dao.nativeReputation().pipe(operators_1.first()).toPromise()];
                    case 5:
                        reputation = _a.sent();
                        return [4 /*yield*/, this.context.getAccount().pipe(operators_1.first()).toPromise()];
                    case 6:
                        sender = _a.sent();
                        return [4 /*yield*/, reputation.reputationOf(sender).pipe(operators_1.first()).toPromise()];
                    case 7:
                        reputationOfUser = _a.sent();
                        if (reputationOfUser.isZero()) {
                            throw Error("Cannot vote because the user " + sender + " does not have any reputation in the DAO at " + dao.id);
                        }
                        return [2 /*return*/, err];
                }
            });
        }); };
        var createTransaction = function () { return __awaiter(_this, void 0, void 0, function () {
            var pluginState, contract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getState()];
                    case 1:
                        pluginState = _a.sent();
                        return [4 /*yield*/, index_1.CompetitionPlugin.getCompetitionContract(this.context, pluginState)];
                    case 2:
                        contract = _a.sent();
                        return [2 /*return*/, {
                                contract: contract,
                                method: 'vote',
                                args: [options.suggestionId]
                            }];
                }
            });
        }); };
        var observable = rxjs_1.from(createTransaction()).pipe(operators_1.concatMap(function (transaction) {
            return _this.context.sendTransaction(transaction, mapReceipt, errorHandler);
        }));
        return index_1.toIOperationObservable(observable);
    };
    CompetitionProposal.prototype.redeemSuggestion = function (options) {
        var _this = this;
        var mapReceipt = function (receipt) {
            if (!receipt.events || receipt.events.length === 0) {
                throw Error('Competition.redeemSuggestion: missing events in receipt');
            }
            else {
                return true;
            }
        };
        var errorHandler = function (err) { return __awaiter(_this, void 0, void 0, function () {
            var pluginState, contract, suggestion;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getState()];
                    case 1:
                        pluginState = _a.sent();
                        return [4 /*yield*/, index_1.CompetitionPlugin.getCompetitionContract(this.context, pluginState)
                            // see if the suggestionId does exist in the contract
                        ];
                    case 2:
                        contract = _a.sent();
                        return [4 /*yield*/, contract.suggestions(options.suggestionId)];
                    case 3:
                        suggestion = _a.sent();
                        if (suggestion.proposalId ===
                            '0x0000000000000000000000000000000000000000000000000000000000000000') {
                            throw Error("A suggestion with suggestionId " + options.suggestionId + " does not exist");
                        }
                        return [2 /*return*/, err];
                }
            });
        }); };
        var createTransaction = function () { return __awaiter(_this, void 0, void 0, function () {
            var pluginState, contract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getState()];
                    case 1:
                        pluginState = _a.sent();
                        return [4 /*yield*/, index_1.CompetitionPlugin.getCompetitionContract(this.context, pluginState)];
                    case 2:
                        contract = _a.sent();
                        return [2 /*return*/, {
                                contract: contract,
                                method: 'redeem',
                                args: [options.suggestionId]
                            }];
                }
            });
        }); };
        var observable = rxjs_1.from(createTransaction()).pipe(operators_1.concatMap(function (transaction) {
            return _this.context.sendTransaction(transaction, mapReceipt, errorHandler);
        }));
        return index_1.toIOperationObservable(observable);
    };
    CompetitionProposal.prototype.getState = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchState()];
                    case 1:
                        _a.sent();
                        if (!this.coreState) {
                            throw new Error('Cannot get plugin state if competitionProposal\'s coreState is not set');
                        }
                        return [4 /*yield*/, this.coreState.plugin.entity.fetchState({}, true)];
                    case 2: return [2 /*return*/, (_a.sent())];
                }
            });
        });
    };
    CompetitionProposal.fragment = {
        name: 'CompetitionProposalFields',
        fragment: graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      fragment CompetitionProposalFields on Proposal {\n        competition {\n          id\n          admin\n          endTime\n          contract\n          suggestionsEndTime\n          createdAt\n          numberOfWinningSuggestions\n          numberOfVotesPerVoters\n          numberOfWinners\n          rewardSplit\n          snapshotBlock\n          startTime\n          totalSuggestions\n          totalVotes\n          votingStartTime\n        }\n      }\n    "], ["\n      fragment CompetitionProposalFields on Proposal {\n        competition {\n          id\n          admin\n          endTime\n          contract\n          suggestionsEndTime\n          createdAt\n          numberOfWinningSuggestions\n          numberOfVotesPerVoters\n          numberOfWinners\n          rewardSplit\n          snapshotBlock\n          startTime\n          totalSuggestions\n          totalVotes\n          votingStartTime\n        }\n      }\n    "])))
    };
    return CompetitionProposal;
}(index_1.Proposal));
exports.CompetitionProposal = CompetitionProposal;
var templateObject_1, templateObject_2;
//# sourceMappingURL=proposal.js.map