"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bn_js_1 = __importDefault(require("bn.js"));
var ethers_1 = require("ethers");
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var operators_1 = require("rxjs/operators");
var index_1 = require("../../index");
var CompetitionSuggestion = /** @class */ (function (_super) {
    __extends(CompetitionSuggestion, _super);
    function CompetitionSuggestion(context, idOrOpts) {
        var _this = this;
        if (typeof idOrOpts === 'string') {
            _this = _super.call(this, context, idOrOpts) || this;
            _this.id = idOrOpts;
        }
        else {
            if (Object.keys(idOrOpts).includes('plugin') &&
                Object.keys(idOrOpts).includes('suggestionId')) {
                var id = CompetitionSuggestion.calculateId(idOrOpts);
                _this = _super.call(this, context, id) || this;
                _this.id = id;
                _this.suggestionId = idOrOpts.suggestionId;
            }
            else {
                var opts = idOrOpts;
                _this = _super.call(this, context, opts) || this;
                _this.id = opts.id;
                _this.setState(opts);
            }
        }
        return _this;
    }
    CompetitionSuggestion.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a, _b;
        var itemMap = function (arc, item, queriedId) {
            var state = CompetitionSuggestion.itemMap(arc, item, queriedId);
            return new CompetitionSuggestion(arc, state);
        };
        var query;
        // if we are looing for the suggestions of a particular proposal, we prime the cache..
        if (options.where && options.where.proposal && !options.where.id) {
            query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query CompetitionSuggestionSearchByProposal\n        {\n          competitionProposal (id: \"", "\") {\n              suggestions ", " {\n                ...CompetitionSuggestionFields\n              }\n            }\n        }\n        ", "\n      "], ["query CompetitionSuggestionSearchByProposal\n        {\n          competitionProposal (id: \"", "\") {\n              suggestions ",
                " {\n                ...CompetitionSuggestionFields\n              }\n            }\n        }\n        ", "\n      "])), options.where.proposal, index_1.createGraphQlQuery({
                where: __assign(__assign({}, options.where), { proposal: undefined })
            }), CompetitionSuggestion.fragments.CompetitionSuggestionFields);
            return context.getObservableObject(context, query, function (arc, r, queriedId) {
                if (!r) {
                    // no such proposal was found
                    return [];
                }
                var itemMapper = function (item) {
                    return new CompetitionSuggestion(arc, CompetitionSuggestion.itemMap(context, item, queriedId));
                };
                return r.suggestions.map(itemMapper);
            }, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
        }
        else {
            query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["query CompetitionSuggestionSearch\n        {\n          competitionSuggestions ", " {\n            ...CompetitionSuggestionFields\n          }\n        }\n        ", "\n      "], ["query CompetitionSuggestionSearch\n        {\n          competitionSuggestions ", " {\n            ...CompetitionSuggestionFields\n          }\n        }\n        ", "\n      "])), index_1.createGraphQlQuery(options), CompetitionSuggestion.fragments.CompetitionSuggestionFields);
            return context.getObservableList(context, query, itemMap, (_b = options.where) === null || _b === void 0 ? void 0 : _b.id, apolloQueryOptions);
        }
    };
    CompetitionSuggestion.calculateId = function (opts) {
        var seed = index_1.concat(index_1.hexStringToUint8Array(opts.plugin.toLowerCase()), index_1.hexStringToUint8Array(Number(opts.suggestionId).toString(16)));
        return ethers_1.utils.keccak256(seed);
    };
    CompetitionSuggestion.itemMap = function (context, item, queriedId) {
        if (!item) {
            throw Error("Competition Suggestion ItemMap failed. " + (queriedId && "Could not find Competition Suggestion with id '" + queriedId + "'"));
        }
        var redeemedAt = null;
        if (item.redeemedAt !== null) {
            redeemedAt = index_1.secondSinceEpochToDate(item.redeemedAt);
        }
        var positionInWinnerList = null;
        if (item.positionInWinnerList !== null) {
            positionInWinnerList = Number(item.positionInWinnerList);
        }
        return {
            beneficiary: item.beneficiary,
            createdAt: index_1.secondSinceEpochToDate(item.createdAt),
            description: item.description,
            descriptionHash: item.descriptionHash,
            id: item.id,
            isWinner: positionInWinnerList !== null,
            positionInWinnerList: positionInWinnerList,
            proposal: {
                id: item.proposal.id,
                entity: new index_1.CompetitionProposal(context, item.proposal.id)
            },
            redeemedAt: redeemedAt,
            rewardPercentage: Number(item.rewardPercentage),
            suggester: item.suggester,
            suggestionId: item.suggestionId,
            tags: item.tags.map(function (tag) { return tag.id; }),
            title: item.title,
            totalVotes: new bn_js_1.default(item.totalVotes),
            url: item.url
        };
    };
    CompetitionSuggestion.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["query CompetitionSuggestionById\n      {\n        competitionSuggestion (id: \"", "\") {\n          ...CompetitionSuggestionFields\n        }\n      }\n      ", "\n    "], ["query CompetitionSuggestionById\n      {\n        competitionSuggestion (id: \"", "\") {\n          ...CompetitionSuggestionFields\n        }\n      }\n      ", "\n    "])), this.id, CompetitionSuggestion.fragments.CompetitionSuggestionFields);
        return this.context.getObservableObject(this.context, query, CompetitionSuggestion.itemMap, this.id, apolloQueryOptions);
    };
    CompetitionSuggestion.prototype.fetchState = function () {
        return __awaiter(this, void 0, void 0, function () {
            var state;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.state({ fetchPolicy: 'cache-first' }).pipe(operators_1.first()).toPromise()];
                    case 1:
                        state = _a.sent();
                        this.setState(state);
                        return [2 /*return*/, state];
                }
            });
        });
    };
    CompetitionSuggestion.prototype.getPosition = function () {
        return __awaiter(this, void 0, void 0, function () {
            var suggestionState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.warn("This method is deprecated - please use the positionInWinnerList from the proposal state");
                        return [4 /*yield*/, this.fetchState()];
                    case 1:
                        suggestionState = _a.sent();
                        return [2 /*return*/, suggestionState.positionInWinnerList];
                }
            });
        });
    };
    CompetitionSuggestion.prototype.isWinner = function () {
        return __awaiter(this, void 0, void 0, function () {
            var suggestionState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.warn("This method is deprecated - please use the positionInWinnerList !== from the proposal state");
                        return [4 /*yield*/, this.fetchState()];
                    case 1:
                        suggestionState = _a.sent();
                        return [2 /*return*/, suggestionState.isWinner];
                }
            });
        });
    };
    CompetitionSuggestion.prototype.votes = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where = __assign(__assign({}, options.where), { suggestion: this.id });
        return index_1.CompetitionVote.search(this.context, options, apolloQueryOptions);
    };
    CompetitionSuggestion.prototype.redeem = function () {
        var _this = this;
        var observable = this.state().pipe(operators_1.first(), operators_1.concatMap(function (suggestionState) {
            var competition = new index_1.CompetitionProposal(_this.context, suggestionState.proposal.entity.id);
            return competition.redeemSuggestion({
                suggestionId: suggestionState.suggestionId
            });
        }));
        return index_1.toIOperationObservable(observable);
    };
    CompetitionSuggestion.prototype.vote = function () {
        var _this = this;
        var observable = this.state().pipe(operators_1.first(), operators_1.concatMap(function (suggestionState) {
            var competition = new index_1.CompetitionProposal(_this.context, suggestionState.proposal.entity.id);
            return competition.voteSuggestion({
                suggestionId: suggestionState.suggestionId
            });
        }));
        return index_1.toIOperationObservable(observable);
    };
    CompetitionSuggestion.fragments = {
        CompetitionSuggestionFields: graphql_tag_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n      fragment CompetitionSuggestionFields on CompetitionSuggestion {\n        id\n        suggestionId\n        proposal {\n          id\n        }\n        descriptionHash\n        title\n        description\n        url\n        tags {\n          id\n        }\n        # fulltext: [string]\n        beneficiary\n        suggester\n        # votes: [CompetitionVote!] @derivedFrom(field: \"suggestion\")\n        totalVotes\n        createdAt\n        redeemedAt\n        rewardPercentage\n        positionInWinnerList\n      }\n    "], ["\n      fragment CompetitionSuggestionFields on CompetitionSuggestion {\n        id\n        suggestionId\n        proposal {\n          id\n        }\n        descriptionHash\n        title\n        description\n        url\n        tags {\n          id\n        }\n        # fulltext: [string]\n        beneficiary\n        suggester\n        # votes: [CompetitionVote!] @derivedFrom(field: \"suggestion\")\n        totalVotes\n        createdAt\n        redeemedAt\n        rewardPercentage\n        positionInWinnerList\n      }\n    "])))
    };
    return CompetitionSuggestion;
}(index_1.Entity));
exports.CompetitionSuggestion = CompetitionSuggestion;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=suggestion.js.map