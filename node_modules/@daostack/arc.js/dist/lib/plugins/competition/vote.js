"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var index_1 = require("../../index");
var CompetitionVote = /** @class */ (function (_super) {
    __extends(CompetitionVote, _super);
    function CompetitionVote() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CompetitionVote.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a;
        if (!options.where) {
            options.where = {};
        }
        var itemMap = function (arc, item, queriedId) {
            var state = CompetitionVote.itemMap(arc, item, queriedId);
            return new CompetitionVote(arc, state);
        };
        var query;
        if (options.where.suggestion && !options.where.id) {
            query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query CompetitionVoteSearchBySuggestion\n        {\n          competitionSuggestion (id: \"", "\") {\n            id\n            votes ", " {\n              ...CompetitionVoteFields\n            }\n          }\n        }\n        ", "\n      "], ["query CompetitionVoteSearchBySuggestion\n        {\n          competitionSuggestion (id: \"", "\") {\n            id\n            votes ", " {\n              ...CompetitionVoteFields\n            }\n          }\n        }\n        ", "\n      "])), options.where.suggestion, index_1.createGraphQlQuery({ where: __assign(__assign({}, options.where), { suggestion: undefined }) }), CompetitionVote.fragments.CompetitionVoteFields);
            return context.getObservableObject(context, query, function (arc, r, queriedId) {
                if (!r) {
                    // no such proposal was found
                    return [];
                }
                var itemMapper = function (item) {
                    return new CompetitionVote(arc, CompetitionVote.itemMap(arc, item, queriedId));
                };
                return r.votes.map(itemMapper);
            }, options.where.suggestion, apolloQueryOptions);
        }
        else {
            query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["query CompetitionVoteSearch\n        {\n          competitionVotes ", " {\n            ...CompetitionVoteFields\n          }\n        }\n        ", "\n      "], ["query CompetitionVoteSearch\n        {\n          competitionVotes ", " {\n            ...CompetitionVoteFields\n          }\n        }\n        ", "\n      "])), index_1.createGraphQlQuery(options), CompetitionVote.fragments.CompetitionVoteFields);
            return context.getObservableList(context, query, itemMap, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
        }
    };
    CompetitionVote.itemMap = function (context, item, queriedId) {
        if (!item) {
            throw Error("Competition Vote ItemMap failed. " + (queriedId && "Could not find Competition Vote with id '" + queriedId + "'"));
        }
        return {
            createdAt: index_1.secondSinceEpochToDate(item.createdAt),
            id: item.id,
            proposal: item.proposal.id,
            reputation: item.reputation,
            suggestion: item.suggestion.id,
            voter: item.voter
        };
    };
    CompetitionVote.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["query CompetitionVoteById\n      {\n        competitionVote (id: \"", "\") {\n          ...CompetitionVoteFields\n        }\n      }\n      ", "\n      "], ["query CompetitionVoteById\n      {\n        competitionVote (id: \"", "\") {\n          ...CompetitionVoteFields\n        }\n      }\n      ", "\n      "])), this.id, CompetitionVote.fragments.CompetitionVoteFields);
        return this.context.getObservableObject(this.context, query, CompetitionVote.itemMap, this.id, apolloQueryOptions);
    };
    CompetitionVote.fragments = {
        CompetitionVoteFields: graphql_tag_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n      fragment CompetitionVoteFields on CompetitionVote {\n        id\n        createdAt\n        reputation\n        voter\n        proposal {\n          id\n        }\n        suggestion {\n          id\n        }\n      }\n    "], ["\n      fragment CompetitionVoteFields on CompetitionVote {\n        id\n        createdAt\n        reputation\n        voter\n        proposal {\n          id\n        }\n        suggestion {\n          id\n        }\n      }\n    "])))
    };
    return CompetitionVote;
}(index_1.Entity));
exports.CompetitionVote = CompetitionVote;
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=vote.js.map