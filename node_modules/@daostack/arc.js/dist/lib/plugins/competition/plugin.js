"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var rxjs_1 = require("rxjs");
var index_1 = require("../../index");
var CompetitionPlugin = /** @class */ (function (_super) {
    __extends(CompetitionPlugin, _super);
    function CompetitionPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CompetitionPlugin.itemMap = function (context, item, queriedId) {
        if (!item) {
            index_1.Logger.debug("CompetitionPlugin ItemMap failed. " + (queriedId && "Could not find CompetitionPlugin with id '" + queriedId + "'"));
            return null;
        }
        var baseState = index_1.Plugin.itemMapToBaseState(context, item);
        var contributionRewardExtParams = item.contributionRewardExtParams && {
            rewarder: item.contributionRewardExtParams.rewarder,
            voteParams: index_1.mapGenesisProtocolParams(item.contributionRewardExtParams.voteParams),
            votingMachine: item.contributionRewardExtParams.votingMachine
        };
        return __assign(__assign({}, baseState), { pluginParams: contributionRewardExtParams });
    };
    CompetitionPlugin.getCompetitionContract = function (arc, state) {
        if (!state) {
            throw Error("No Plugin was provided");
        }
        var rewarder = state.pluginParams && state.pluginParams.rewarder;
        if (!rewarder) {
            throw Error("This Plugin's rewarder is not set, and so no compeittion contract could be found");
        }
        if (!CompetitionPlugin.isCompetitionPlugin(arc, state)) {
            throw Error("We did not find a Competition contract at the rewarder address " + rewarder);
        }
        var contract = arc.getContract(rewarder);
        return contract;
    };
    CompetitionPlugin.isCompetitionPlugin = function (arc, state) {
        if (state.pluginParams) {
            var contractInfo = arc.getContractInfo(state.pluginParams.rewarder);
            return contractInfo.name === 'Competition';
        }
        else {
            return false;
        }
    };
    CompetitionPlugin.prototype.suggestions = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.proposal = this.id;
        return index_1.CompetitionSuggestion.search(this.context, options, apolloQueryOptions);
    };
    CompetitionPlugin.prototype.votes = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.proposal = this.id;
        return index_1.CompetitionVote.search(this.context, options, apolloQueryOptions);
    };
    CompetitionPlugin.prototype.createCompetitionProposalTransaction = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var context, pluginState, contract, contributionRewardExtAddress, _a, competitionParams, proposerIsAdmin;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        context = this.context;
                        return [4 /*yield*/, this.fetchState()];
                    case 1:
                        pluginState = _b.sent();
                        if (!pluginState) {
                            throw Error("No plugin was found with this id: " + this.id);
                        }
                        contract = CompetitionPlugin.getCompetitionContract(this.context, pluginState);
                        return [4 /*yield*/, contract.contributionRewardExt()];
                    case 2:
                        contributionRewardExtAddress = _b.sent();
                        if (contributionRewardExtAddress.toLowerCase() !== pluginState.address) {
                            throw Error("This ContributionRewardExt/Competition combo is malconfigured: expected " + contributionRewardExtAddress.toLowerCase() + " to equal " + pluginState.address);
                        }
                        _a = options;
                        return [4 /*yield*/, context.saveIPFSData(options)];
                    case 3:
                        _a.descriptionHash = _b.sent();
                        if (!options.rewardSplit) {
                            throw Error("Rewardsplit was not given..");
                        }
                        else {
                            if (options.rewardSplit.reduce(function (a, b) { return a + b; }) !== 100) {
                                throw Error("Rewardsplit must sum 100 (they sum to  " + options.rewardSplit.reduce(function (a, b) { return a + b; }) + ")");
                            }
                        }
                        competitionParams = [
                            (options.startTime && index_1.dateToSecondsSinceEpoch(options.startTime)) || 0,
                            index_1.dateToSecondsSinceEpoch(options.votingStartTime) || 0,
                            index_1.dateToSecondsSinceEpoch(options.endTime) || 0,
                            options.numberOfVotesPerVoter.toString() || 0,
                            index_1.dateToSecondsSinceEpoch(options.suggestionsEndTime) || 0
                        ];
                        proposerIsAdmin = !!options.proposerIsAdmin;
                        return [2 /*return*/, {
                                contract: contract,
                                method: 'proposeCompetition',
                                args: [
                                    options.descriptionHash || '',
                                    (options.reputationReward && options.reputationReward.toString()) || 0,
                                    [
                                        (options.nativeTokenReward && options.nativeTokenReward.toString()) || 0,
                                        (options.ethReward && options.ethReward.toString()) || 0,
                                        (options.externalTokenReward && options.externalTokenReward.toString()) || 0
                                    ],
                                    options.externalTokenAddress || index_1.NULL_ADDRESS,
                                    options.rewardSplit,
                                    competitionParams,
                                    proposerIsAdmin
                                ]
                            }];
                }
            });
        });
    };
    CompetitionPlugin.prototype.createProposal = function (options) {
        var _this = this;
        var observable = rxjs_1.Observable.create(function (observer) { return __awaiter(_this, void 0, void 0, function () {
            var createTransaction, map, errHandler, sendTransactionObservable, sub_1, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.createProposalTransaction(options)];
                    case 1:
                        createTransaction = _a.sent();
                        map = this.createProposalTransactionMap();
                        errHandler = this.createProposalErrorHandler(options);
                        sendTransactionObservable = this.context.sendTransaction(createTransaction, map, errHandler);
                        sub_1 = sendTransactionObservable.subscribe(observer);
                        return [2 /*return*/, function () { return sub_1.unsubscribe(); }];
                    case 2:
                        e_1 = _a.sent();
                        observer.error(e_1);
                        return [2 /*return*/];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        return index_1.toIOperationObservable(observable);
    };
    CompetitionPlugin.prototype.createProposalTransactionMap = function () {
        var _this = this;
        return function (receipt) {
            var args = index_1.getEventArgs(receipt, 'NewCompetitionProposal', 'Competition.createProposal');
            var proposalId = args[0];
            return new index_1.CompetitionProposal(_this.context, proposalId);
        };
    };
    CompetitionPlugin.prototype.createProposalErrorHandler = function (options) {
        var _this = this;
        return function (err) { return __awaiter(_this, void 0, void 0, function () {
            var _a, _b, msg;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!err.message.match(/startTime should be greater than proposing time/gi)) return [3 /*break*/, 2];
                        if (!this.context.web3) {
                            throw Error('Web3 provider not set');
                        }
                        _a = Error;
                        _b = err.message + " - startTime is " + options.startTime + ", current block time is ";
                        return [4 /*yield*/, index_1.getBlockTime(this.context.web3)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [_b + (_c.sent())])];
                    case 2:
                        msg = "Error creating proposal: " + err.message;
                        return [2 /*return*/, Error(msg)];
                }
            });
        }); };
    };
    CompetitionPlugin.prototype.ethBalance = function () {
        return __awaiter(this, void 0, void 0, function () {
            var state, contributionRewardExt, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!!this.coreState) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.fetchState()];
                    case 1:
                        state = _c.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        state = this.coreState;
                        _c.label = 3;
                    case 3:
                        contributionRewardExt = this.context.getContract(state.address);
                        _b = (_a = this.context).ethBalance;
                        return [4 /*yield*/, contributionRewardExt.vault()];
                    case 4: return [2 /*return*/, _b.apply(_a, [_c.sent()])];
                }
            });
        });
    };
    CompetitionPlugin.prototype.createProposalTransaction = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var context, pluginState, contract, contributionRewardExtAddress, _a, competitionParams, proposerIsAdmin;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        context = this.context;
                        return [4 /*yield*/, this.fetchState()];
                    case 1:
                        pluginState = _b.sent();
                        if (!pluginState) {
                            throw Error("No scheme was found with this id: " + this.id);
                        }
                        contract = CompetitionPlugin.getCompetitionContract(this.context, pluginState);
                        return [4 /*yield*/, contract.contributionRewardExt()];
                    case 2:
                        contributionRewardExtAddress = _b.sent();
                        if (contributionRewardExtAddress.toLowerCase() !== pluginState.address) {
                            throw Error("This ContributionRewardExt/Competition combo is malconfigured: expected " + contributionRewardExtAddress.toLowerCase() + " to equal " + pluginState.address);
                        }
                        _a = options;
                        return [4 /*yield*/, context.saveIPFSData(options)];
                    case 3:
                        _a.descriptionHash = _b.sent();
                        if (!options.rewardSplit) {
                            throw Error("Rewardsplit was not given..");
                        }
                        else {
                            if (options.rewardSplit.reduce(function (a, b) { return a + b; }) !== 100) {
                                throw Error("Rewardsplit must sum 100 (they sum to  " + options.rewardSplit.reduce(function (a, b) { return a + b; }) + ")");
                            }
                        }
                        competitionParams = [
                            (options.startTime && index_1.dateToSecondsSinceEpoch(options.startTime)) || 0,
                            index_1.dateToSecondsSinceEpoch(options.votingStartTime) || 0,
                            index_1.dateToSecondsSinceEpoch(options.endTime) || 0,
                            options.numberOfVotesPerVoter.toString() || 0,
                            index_1.dateToSecondsSinceEpoch(options.suggestionsEndTime) || 0
                        ];
                        proposerIsAdmin = !!options.proposerIsAdmin;
                        return [2 /*return*/, {
                                contract: contract,
                                method: 'proposeCompetition',
                                args: [
                                    options.descriptionHash || '',
                                    (options.reputationReward && options.reputationReward.toString()) || 0,
                                    [
                                        (options.nativeTokenReward && options.nativeTokenReward.toString()) || 0,
                                        (options.ethReward && options.ethReward.toString()) || 0,
                                        (options.externalTokenReward && options.externalTokenReward.toString()) || 0
                                    ],
                                    options.externalTokenAddress || index_1.NULL_ADDRESS,
                                    options.rewardSplit,
                                    competitionParams,
                                    proposerIsAdmin
                                ]
                            }];
                }
            });
        });
    };
    return CompetitionPlugin;
}(index_1.ProposalPlugin));
exports.CompetitionPlugin = CompetitionPlugin;
//# sourceMappingURL=plugin.js.map