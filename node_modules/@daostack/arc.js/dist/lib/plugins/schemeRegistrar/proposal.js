"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var index_1 = require("../../index");
var SchemeRegistrarProposal = /** @class */ (function (_super) {
    __extends(SchemeRegistrarProposal, _super);
    function SchemeRegistrarProposal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SchemeRegistrarProposal.itemMap = function (context, item, queriedId) {
        if (!item) {
            index_1.Logger.debug("SchemeRegistrarProposal ItemMap failed. " + (queriedId && "Could not find SchemeRegistrarProposal with id '" + queriedId + "'"));
            return null;
        }
        var type;
        if (item.schemeRegistrar.schemeToRegister) {
            // TODO: this is failing bc of https://github.com/daostack/subgraph/issues/224
            if (item.dao.schemes
                .map(function (s) { return s.address.toLowerCase(); })
                .includes(item.schemeRegistrar.schemeToRegister.toLowerCase())) {
                type = 'SchemeRegistrarEdit';
            }
            else {
                type = 'SchemeRegistrarAdd';
            }
        }
        else if (item.schemeRegistrar.schemeToRemove) {
            type = 'SchemeRegistrarRemove';
        }
        else {
            throw Error("Unknown proposal type: schemeRegistrar without a scheme to register or to remove");
        }
        var schemeRegistrarState = index_1.SchemeRegistrarPlugin.itemMap(context, item.scheme, queriedId);
        if (!schemeRegistrarState) {
            return null;
        }
        var schemeRegistrar = new index_1.SchemeRegistrarPlugin(context, schemeRegistrarState);
        var schemeRegistrarProposal = new SchemeRegistrarProposal(context, item.id);
        var baseState = index_1.Proposal.itemMapToBaseState(context, item, schemeRegistrar, schemeRegistrarProposal, type);
        if (!baseState) {
            return null;
        }
        return __assign(__assign({}, baseState), { decision: item.schemeRegistrar.decision, pluginRegistered: item.schemeRegistrar.schemeRegistered, pluginRemoved: item.schemeRegistrar.schemeRemoved, pluginToRegister: item.schemeRegistrar.schemeToRegister, pluginToRegisterPermission: item.schemeRegistrar.schemeToRegisterPermission, pluginToRemove: item.schemeRegistrar.schemeToRemove });
    };
    SchemeRegistrarProposal.prototype.state = function (apolloQueryOptions) {
        var query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query ProposalState\n      {\n        proposal(id: \"", "\") {\n          ...ProposalFields\n          votes {\n            id\n          }\n          stakes {\n            id\n          }\n        }\n      }\n      ", "\n      ", "\n    "], ["query ProposalState\n      {\n        proposal(id: \"", "\") {\n          ...ProposalFields\n          votes {\n            id\n          }\n          stakes {\n            id\n          }\n        }\n      }\n      ", "\n      ", "\n    "])), this.id, index_1.Proposal.baseFragment, index_1.Plugin.baseFragment);
        return this.context.getObservableObject(this.context, query, SchemeRegistrarProposal.itemMap, this.id, apolloQueryOptions);
    };
    SchemeRegistrarProposal.fragment = {
        name: 'SchemeRegistrarProposalFields',
        fragment: graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n      fragment SchemeRegistrarProposalFields on Proposal {\n        schemeRegistrar {\n          id\n          schemeToRegister\n          schemeToRegisterPermission\n          schemeToRemove\n          decision\n          schemeRegistered\n          schemeRemoved\n        }\n      }\n    "], ["\n      fragment SchemeRegistrarProposalFields on Proposal {\n        schemeRegistrar {\n          id\n          schemeToRegister\n          schemeToRegisterPermission\n          schemeToRemove\n          decision\n          schemeRegistered\n          schemeRemoved\n        }\n      }\n    "])))
    };
    return SchemeRegistrarProposal;
}(index_1.Proposal));
exports.SchemeRegistrarProposal = SchemeRegistrarProposal;
var templateObject_1, templateObject_2;
//# sourceMappingURL=proposal.js.map