"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ethers_1 = require("ethers");
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var operators_1 = require("rxjs/operators");
var index_1 = require("../index");
var Plugin = /** @class */ (function (_super) {
    __extends(Plugin, _super);
    function Plugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Plugin, "baseFragment", {
        get: function () {
            if (!this.baseFragmentField) {
                this.baseFragmentField = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        fragment PluginFields on ControllerScheme {\n          id\n          address\n          name\n          dao { id }\n          canDelegateCall\n          canRegisterSchemes\n          canUpgradeController\n          canManageGlobalConstraints\n          numberOfQueuedProposals\n          numberOfPreBoostedProposals\n          numberOfBoostedProposals\n          version\n          ", "\n        }\n        ", "\n      "], ["\n        fragment PluginFields on ControllerScheme {\n          id\n          address\n          name\n          dao { id }\n          canDelegateCall\n          canRegisterSchemes\n          canUpgradeController\n          canManageGlobalConstraints\n          numberOfQueuedProposals\n          numberOfPreBoostedProposals\n          numberOfBoostedProposals\n          version\n          ",
                    "\n        }\n        ",
                    "\n      "])), Object.values(index_1.Plugins)
                    .filter(function (plugin) { return plugin.fragment; })
                    .map(function (plugin) { var _a; return '...' + ((_a = plugin.fragment) === null || _a === void 0 ? void 0 : _a.name); })
                    .join('\n'), Object.values(index_1.Plugins)
                    .filter(function (plugin) { return plugin.fragment; })
                    .map(function (plugin) { var _a, _b; return (_b = (_a = plugin.fragment) === null || _a === void 0 ? void 0 : _a.fragment.loc) === null || _b === void 0 ? void 0 : _b.source.body; })
                    .join('\n'));
            }
            return this.baseFragmentField;
        },
        enumerable: true,
        configurable: true
    });
    Plugin.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a;
        var query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["query SchemeSearchAllData {\n        controllerSchemes ", "\n        {\n          ...PluginFields\n        }\n      }\n      ", "\n    "], ["query SchemeSearchAllData {\n        controllerSchemes ", "\n        {\n          ...PluginFields\n        }\n      }\n      ", "\n    "])), index_1.createGraphQlQuery(options), Plugin.baseFragment);
        var itemMap = function (arc, item, queriedId) {
            if (!options.where) {
                options.where = {};
            }
            if (!Object.keys(index_1.Plugins).includes(item.name)) {
                index_1.Logger.debug("Plugin name '" + item.name + "' not supported. Instantiating it as Unknown Plugin.");
                var state = index_1.Plugins.unknown.itemMap(arc, item, queriedId);
                if (!state) {
                    return null;
                }
                return new index_1.Plugins.unknown(arc, state);
            }
            else {
                if (item.name === 'ContributionRewardExt') {
                    // Determine what type of plugin this is
                    var rewarder = item.contributionRewardExtParams.rewarder;
                    try {
                        if (arc.getContractInfo(rewarder).name === 'Competition') {
                            item.name = 'Competition';
                        }
                    }
                    catch (err) {
                        // Continue as usual, creating a ContributionRewardExt class
                    }
                }
                var state = index_1.Plugins[item.name].itemMap(arc, item, queriedId);
                if (!state) {
                    return null;
                }
                return new index_1.Plugins[item.name](arc, state);
            }
        };
        return context.getObservableList(context, query, itemMap, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
    };
    Plugin.calculateId = function (opts) {
        var seed = index_1.concat(index_1.hexStringToUint8Array(opts.daoAddress.toLowerCase()), index_1.hexStringToUint8Array(opts.contractAddress.toLowerCase()));
        return ethers_1.utils.keccak256(seed);
    };
    Plugin.itemMapToBaseState = function (context, item) {
        var name = item.name;
        if (!name) {
            try {
                name = context.getContractInfo(item.address).name;
            }
            catch (err) {
                if (err.message.match(/no contract/gi)) {
                    // continue
                }
                else {
                    throw err;
                }
            }
        }
        return {
            address: item.address,
            canDelegateCall: item.canDelegateCall,
            canManageGlobalConstraints: item.canManageGlobalConstraints,
            canRegisterPlugins: item.canRegisterSchemes,
            canUpgradeController: item.canUpgradeController,
            dao: {
                id: item.dao.id,
                entity: new index_1.DAO(context, item.dao.id)
            },
            id: item.id,
            name: name,
            numberOfBoostedProposals: Number(item.numberOfBoostedProposals),
            numberOfPreBoostedProposals: Number(item.numberOfPreBoostedProposals),
            numberOfQueuedProposals: Number(item.numberOfQueuedProposals),
            version: item.version
        };
    };
    Plugin.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["query SchemeStateById\n      {\n        controllerScheme (id: \"", "\") {\n          ...PluginFields\n        }\n      }\n      ", "\n    "], ["query SchemeStateById\n      {\n        controllerScheme (id: \"", "\") {\n          ...PluginFields\n        }\n      }\n      ", "\n    "])), this.id, Plugin.baseFragment);
        return this.context.getObservableObject(this.context, query, this.constructor.itemMap, this.id, apolloQueryOptions);
    };
    Plugin.prototype.fetchState = function (apolloQueryOptions, refetch) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var state;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.coreState === undefined || refetch)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.state(apolloQueryOptions).pipe(operators_1.first()).toPromise()];
                    case 1:
                        state = _a.sent();
                        this.setState(state);
                        return [2 /*return*/, state];
                    case 2: return [2 /*return*/, this.coreState];
                }
            });
        });
    };
    return Plugin;
}(index_1.Entity));
exports.Plugin = Plugin;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=plugin.js.map