"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var index_1 = require("../index");
var UnknownPlugin = /** @class */ (function (_super) {
    __extends(UnknownPlugin, _super);
    function UnknownPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnknownPlugin.itemMap = function (context, item, queriedId) {
        if (!item) {
            index_1.Logger.debug("Unknown Plugin ItemMap failed. " + (queriedId && "Could not find Unknown Plugin with id '" + queriedId + "'"));
            return null;
        }
        var name = item.name;
        if (!name) {
            try {
                name = context.getContractInfo(item.address).name;
            }
            catch (err) {
                if (err.message.match(/no contract/gi)) {
                    // continue
                }
                else {
                    throw err;
                }
            }
        }
        return {
            address: item.address,
            canDelegateCall: item.canDelegateCall,
            canManageGlobalConstraints: item.canManageGlobalConstraints,
            canRegisterPlugins: item.canRegisterSchemes,
            canUpgradeController: item.canUpgradeController,
            dao: {
                id: item.dao.id,
                entity: new index_1.DAO(context, item.dao.id)
            },
            id: item.id,
            name: name,
            numberOfBoostedProposals: Number(item.numberOfBoostedProposals),
            numberOfPreBoostedProposals: Number(item.numberOfPreBoostedProposals),
            numberOfQueuedProposals: Number(item.numberOfQueuedProposals),
            version: item.version
        };
    };
    UnknownPlugin.prototype.state = function (apolloQueryOptions) {
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var query = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["query SchemeStateById\n      {\n        controllerScheme (id: \"", "\") {\n          ...PluginFields\n        }\n      }\n      ", "\n    "], ["query SchemeStateById\n      {\n        controllerScheme (id: \"", "\") {\n          ...PluginFields\n        }\n      }\n      ", "\n    "])), this.id, index_1.Plugin.baseFragment);
        return this.context.getObservableObject(this.context, query, UnknownPlugin.itemMap, this.id, apolloQueryOptions);
    };
    return UnknownPlugin;
}(index_1.Plugin));
exports.UnknownPlugin = UnknownPlugin;
var templateObject_1;
//# sourceMappingURL=unknownPlugin.js.map