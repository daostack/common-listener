"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bn_js_1 = __importDefault(require("bn.js"));
var ethers_1 = require("ethers");
var graphql_tag_1 = __importDefault(require("graphql-tag"));
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var index_1 = require("../index");
var plugin_1 = require("./plugin");
var IProposalOutcome;
(function (IProposalOutcome) {
    IProposalOutcome[IProposalOutcome["None"] = 0] = "None";
    IProposalOutcome[IProposalOutcome["Pass"] = 1] = "Pass";
    IProposalOutcome[IProposalOutcome["Fail"] = 2] = "Fail";
})(IProposalOutcome = exports.IProposalOutcome || (exports.IProposalOutcome = {}));
var IProposalStage;
(function (IProposalStage) {
    IProposalStage[IProposalStage["ExpiredInQueue"] = 0] = "ExpiredInQueue";
    IProposalStage[IProposalStage["Executed"] = 1] = "Executed";
    IProposalStage[IProposalStage["Queued"] = 2] = "Queued";
    IProposalStage[IProposalStage["PreBoosted"] = 3] = "PreBoosted";
    IProposalStage[IProposalStage["Boosted"] = 4] = "Boosted";
    IProposalStage[IProposalStage["QuietEndingPeriod"] = 5] = "QuietEndingPeriod";
})(IProposalStage = exports.IProposalStage || (exports.IProposalStage = {}));
var IExecutionState;
(function (IExecutionState) {
    IExecutionState[IExecutionState["None"] = 0] = "None";
    IExecutionState[IExecutionState["QueueBarCrossed"] = 1] = "QueueBarCrossed";
    IExecutionState[IExecutionState["QueueTimeOut"] = 2] = "QueueTimeOut";
    IExecutionState[IExecutionState["PreBoostedBarCrossed"] = 3] = "PreBoostedBarCrossed";
    IExecutionState[IExecutionState["BoostedTimeOut"] = 4] = "BoostedTimeOut";
    IExecutionState[IExecutionState["BoostedBarCrossed"] = 5] = "BoostedBarCrossed";
})(IExecutionState = exports.IExecutionState || (exports.IExecutionState = {}));
var ProposalQuerySortOptions;
(function (ProposalQuerySortOptions) {
    ProposalQuerySortOptions["resolvesAt"] = "resolvesAt";
    ProposalQuerySortOptions["preBoostedAt"] = "preBoostedAt";
})(ProposalQuerySortOptions || (ProposalQuerySortOptions = {}));
var Proposal = /** @class */ (function (_super) {
    __extends(Proposal, _super);
    function Proposal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Proposal, "baseFragment", {
        get: function () {
            if (!this.baseFragmentField) {
                this.baseFragmentField = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["fragment ProposalFields on Proposal {\n        id\n        accountsWithUnclaimedRewards\n        boostedAt\n        closingAt\n        confidenceThreshold\n        createdAt\n        dao {\n          id\n          schemes {\n            id\n            address\n          }\n        }\n        description\n        descriptionHash\n        executedAt\n        executionState\n        expiresInQueueAt\n        genesisProtocolParams {\n          id\n          activationTime\n          boostedVotePeriodLimit\n          daoBountyConst\n          limitExponentValue\n          minimumDaoBounty\n          preBoostedVotePeriodLimit\n          proposingRepReward\n          queuedVotePeriodLimit\n          queuedVoteRequiredPercentage\n          quietEndingPeriod\n          thresholdConst\n          votersReputationLossRatio\n        }\n        gpRewards {\n          id\n        }\n        scheme {\n          ...PluginFields\n        }\n        gpQueue {\n          id\n          threshold\n          votingMachine\n        }\n        organizationId\n        preBoostedAt\n        proposer\n        quietEndingPeriodBeganAt\n\n        stage\n        # stakes { id }\n        stakesFor\n        stakesAgainst\n        tags {\n          id\n        }\n        totalRepWhenCreated\n        totalRepWhenExecuted\n        title\n        url\n        votes { id }\n        votesAgainst\n        votesFor\n        votingMachine\n        winningOutcome\n        ", "\n      }\n      ", "\n\n      ", "\n"], ["fragment ProposalFields on Proposal {\n        id\n        accountsWithUnclaimedRewards\n        boostedAt\n        closingAt\n        confidenceThreshold\n        createdAt\n        dao {\n          id\n          schemes {\n            id\n            address\n          }\n        }\n        description\n        descriptionHash\n        executedAt\n        executionState\n        expiresInQueueAt\n        genesisProtocolParams {\n          id\n          activationTime\n          boostedVotePeriodLimit\n          daoBountyConst\n          limitExponentValue\n          minimumDaoBounty\n          preBoostedVotePeriodLimit\n          proposingRepReward\n          queuedVotePeriodLimit\n          queuedVoteRequiredPercentage\n          quietEndingPeriod\n          thresholdConst\n          votersReputationLossRatio\n        }\n        gpRewards {\n          id\n        }\n        scheme {\n          ...PluginFields\n        }\n        gpQueue {\n          id\n          threshold\n          votingMachine\n        }\n        organizationId\n        preBoostedAt\n        proposer\n        quietEndingPeriodBeganAt\n\n        stage\n        # stakes { id }\n        stakesFor\n        stakesAgainst\n        tags {\n          id\n        }\n        totalRepWhenCreated\n        totalRepWhenExecuted\n        title\n        url\n        votes { id }\n        votesAgainst\n        votesFor\n        votingMachine\n        winningOutcome\n        ",
                    "\n      }\n      ",
                    "\n\n      ", "\n"])), Object.values(index_1.Proposals)
                    .filter(function (proposal) { return proposal.fragment; })
                    .map(function (proposal) { var _a; return '...' + ((_a = proposal.fragment) === null || _a === void 0 ? void 0 : _a.name); })
                    .join('\n'), Object.values(index_1.Proposals)
                    .filter(function (proposal) { return proposal.fragment; })
                    .map(function (proposal) { var _a, _b; return (_b = (_a = proposal.fragment) === null || _a === void 0 ? void 0 : _a.fragment.loc) === null || _b === void 0 ? void 0 : _b.source.body; })
                    .join('\n'), plugin_1.Plugin.baseFragment);
            }
            return this.baseFragmentField;
        },
        enumerable: true,
        configurable: true
    });
    Proposal.search = function (context, options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        var _a;
        var where = '';
        var itemMap = function (arc, r, queriedId) {
            if (r.scheme.name === 'ContributionRewardExt') {
                if (r.competition) {
                    r.scheme.name = 'Competition';
                }
            }
            var state = index_1.Proposals[r.scheme.name].itemMap(arc, r, queriedId);
            if (!state) {
                return null;
            }
            return new index_1.Proposals[r.scheme.name](arc, state);
        };
        if (!options.where) {
            options.where = {};
        }
        for (var _i = 0, _b = Object.keys(options.where); _i < _b.length; _i++) {
            var key = _b[_i];
            var value = options.where[key];
            if (key === 'stage' && value !== undefined) {
                where += "stage: \"" + IProposalStage[value] + "\"\n";
            }
            else if (key === 'stage_in' && Array.isArray(value)) {
                var stageValues = value.map(function (stage) { return '"' + IProposalStage[stage] + '"'; });
                where += "stage_in: [" + stageValues.join(',') + "]\n";
            }
            else if (key === 'type') {
                // TODO: we are not distinguishing between the schemeregisterpropose
                // and SchemeRegistrarProposeToRemove proposals
                if (value.toString().includes('SchemeRegistrar')) {
                    where += "schemeRegistrar_not: null\n";
                }
                else {
                    if (index_1.Proposals[value] === undefined) {
                        throw Error("Unknown value for \"type\" in proposals query: " + value);
                    }
                    var apolloKey = value[0].toLowerCase() + value.slice(1);
                    where += apolloKey + "_not: null\n";
                }
            }
            else if (Array.isArray(options.where[key])) {
                // Support for operators like _in
                var values = options.where[key].map(function (val) { return '"' + val + '"'; });
                where += key + ": [" + values.join(',') + "]\n";
            }
            else {
                if (key === 'proposer' || key === 'beneficiary' || key === 'dao') {
                    var option = options.where[key];
                    index_1.isAddress(option);
                    where += key + ": \"" + option.toLowerCase() + "\"\n";
                }
                else {
                    where += key + ": \"" + options.where[key] + "\"\n";
                }
            }
        }
        var query = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["query ProposalsSearchAllData\n      {\n        proposals ", " {\n          ...ProposalFields\n          votes {\n            id\n          }\n          stakes {\n            id\n          }\n        }\n      }\n      ", "\n    "], ["query ProposalsSearchAllData\n      {\n        proposals ", " {\n          ...ProposalFields\n          votes {\n            id\n          }\n          stakes {\n            id\n          }\n        }\n      }\n      ", "\n    "])), index_1.createGraphQlQuery(options, where), Proposal.baseFragment);
        return context.getObservableList(context, query, itemMap, (_a = options.where) === null || _a === void 0 ? void 0 : _a.id, apolloQueryOptions);
    };
    Proposal.calculateId = function (address, proposalCount) {
        var seed = index_1.concat(index_1.hexStringToUint8Array(address.toLowerCase()), index_1.hexStringToUint8Array(proposalCount.toString()));
        return ethers_1.utils.keccak256(seed);
    };
    Proposal.itemMapToBaseState = function (context, item, plugin, proposal, type) {
        if (!item) {
            // no proposal was found - we return null
            // throw Error(`No proposal with id ${this.id} could be found`)
            return null;
        }
        var name = item.scheme.name;
        if (!name) {
            try {
                name = context.getContractInfo(item.scheme.address).name;
            }
            catch (err) {
                if (err.message.match(/no contract/gi)) {
                    // continue
                }
                else {
                    throw err;
                }
            }
        }
        // the  formule to enter into the preboosted state is:
        // (S+/S-) > AlphaConstant^NumberOfBoostedProposal.
        // (stakesFor/stakesAgainst) > gpQueue.threshold
        var stage = IProposalStage[item.stage];
        var threshold = index_1.realMathToNumber(new bn_js_1.default(item.gpQueue.threshold));
        var stakesFor = new bn_js_1.default(item.stakesFor);
        var stakesAgainst = new bn_js_1.default(item.stakesAgainst);
        // upstakeNeededToPreBoost is the amount of tokens needed to upstake to move to the preboost queue
        // this is only non-zero for Queued proposals
        // note that the number can be negative!
        var upstakeNeededToPreBoost = new bn_js_1.default(0);
        var PRECISION = Math.pow(2, 40);
        if (stage === IProposalStage.Queued) {
            upstakeNeededToPreBoost = new bn_js_1.default(threshold * PRECISION)
                .mul(stakesAgainst)
                .div(new bn_js_1.default(PRECISION))
                .sub(stakesFor);
        }
        // upstakeNeededToPreBoost is the amount of tokens needed to upstake to move to the Queued queue
        // this is only non-zero for Preboosted proposals
        // note that the number can be negative!
        var downStakeNeededToQueue = new bn_js_1.default(0);
        if (stage === IProposalStage.PreBoosted) {
            downStakeNeededToQueue = stakesFor
                .mul(new bn_js_1.default(PRECISION))
                .div(new bn_js_1.default(threshold * PRECISION))
                .sub(stakesAgainst);
        }
        var gpQueue = item.gpQueue;
        var dao = new index_1.DAO(context, item.dao.id);
        var queueState = {
            dao: {
                id: dao.id,
                entity: dao
            },
            id: gpQueue.id,
            name: name,
            plugin: {
                id: plugin.id,
                entity: plugin
            },
            threshold: threshold,
            votingMachine: gpQueue.votingMachine
        };
        return {
            accountsWithUnclaimedRewards: item.accountsWithUnclaimedRewards,
            boostedAt: Number(item.boostedAt),
            closingAt: Number(item.closingAt),
            confidenceThreshold: Number(item.confidenceThreshold),
            createdAt: Number(item.createdAt),
            dao: {
                id: dao.id,
                entity: dao
            },
            description: item.description,
            descriptionHash: item.descriptionHash,
            downStakeNeededToQueue: downStakeNeededToQueue,
            executedAt: Number(item.executedAt),
            executionState: IExecutionState[item.executionState],
            expiresInQueueAt: Number(item.expiresInQueueAt),
            genesisProtocolParams: index_1.mapGenesisProtocolParams(item.genesisProtocolParams),
            id: item.id,
            name: name,
            organizationId: item.organizationId,
            paramsHash: item.paramsHash,
            preBoostedAt: Number(item.preBoostedAt),
            proposal: {
                id: proposal.id,
                entity: proposal
            },
            proposer: item.proposer,
            queue: {
                id: queueState.id,
                entity: new index_1.Queue(context, queueState, dao)
            },
            quietEndingPeriodBeganAt: Number(item.quietEndingPeriodBeganAt),
            resolvedAt: item.resolvedAt !== undefined ? Number(item.resolvedAt) : 0,
            plugin: {
                id: plugin.id,
                entity: plugin
            },
            stage: stage,
            stakesAgainst: stakesAgainst,
            stakesFor: stakesFor,
            tags: item.tags.map(function (t) { return t.id; }),
            title: item.title,
            totalRepWhenCreated: new bn_js_1.default(item.totalRepWhenCreated),
            totalRepWhenExecuted: new bn_js_1.default(item.totalRepWhenExecuted),
            type: type,
            upstakeNeededToPreBoost: upstakeNeededToPreBoost,
            url: item.url,
            votes: item.votes.map(function (vote) {
                return {
                    id: vote.id,
                    entity: new index_1.Vote(context, vote.id)
                };
            }),
            voteOnBehalf: item.voteOnBehalf,
            votesAgainst: new bn_js_1.default(item.votesAgainst),
            votesCount: item.votes.length,
            votesFor: new bn_js_1.default(item.votesFor),
            votingMachine: item.votingMachine,
            winningOutcome: IProposalOutcome[item.winningOutcome]
        };
    };
    Proposal.prototype.votingMachine = function () {
        return __awaiter(this, void 0, void 0, function () {
            var state;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetchState()];
                    case 1:
                        state = _a.sent();
                        return [2 /*return*/, this.context.getContract(state.votingMachine)];
                }
            });
        });
    };
    Proposal.prototype.stakingToken = function () {
        return this.context.GENToken();
    };
    Proposal.prototype.stake = function (outcome, amount) {
        var _this = this;
        var mapReceipt = function (receipt) {
            var _a = index_1.getEventAndArgs(receipt, 'Stake', 'Proposal.stake'), event = _a[0], args = _a[1];
            return new index_1.Stake(_this.context, {
                id: index_1.eventId(event),
                amount: args[3],
                // createdAt is "about now", but we cannot calculate the data that will be indexed by the subgraph
                createdAt: undefined,
                outcome: outcome,
                proposal: {
                    id: _this.id,
                    entity: _this
                },
                staker: args[2] // _staker
            });
        };
        var errorHandler = function (error) { return __awaiter(_this, void 0, void 0, function () {
            var proposal, votingMachine, proposalState, stakingToken, defaultAccount, balance, _a, amountBN, msg, allowance, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        proposal = this;
                        return [4 /*yield*/, this.votingMachine()];
                    case 1:
                        votingMachine = _c.sent();
                        return [4 /*yield*/, votingMachine.proposals(proposal.id)];
                    case 2:
                        proposalState = _c.sent();
                        stakingToken = this.stakingToken();
                        if (proposalState.proposer === index_1.NULL_ADDRESS) {
                            return [2 /*return*/, new Error("Unknown proposal with id " + proposal.id)];
                        }
                        return [4 /*yield*/, this.context.getAccount().pipe(operators_1.first()).toPromise()];
                    case 3:
                        defaultAccount = _c.sent();
                        _a = bn_js_1.default.bind;
                        return [4 /*yield*/, stakingToken.contract().balanceOf(defaultAccount).toString()];
                    case 4:
                        balance = new (_a.apply(bn_js_1.default, [void 0, _c.sent()]))();
                        amountBN = new bn_js_1.default(amount);
                        if (balance.lt(amountBN)) {
                            msg = "Staker " + defaultAccount + " has insufficient balance to stake " + amount.toString() + "\n          (balance is " + balance.toString() + ")";
                            return [2 /*return*/, new Error(msg)];
                        }
                        _b = bn_js_1.default.bind;
                        return [4 /*yield*/, stakingToken.contract().allowance(defaultAccount, votingMachine.address)];
                    case 5:
                        allowance = new (_b.apply(bn_js_1.default, [void 0, _c.sent()]))();
                        if (allowance.lt(amountBN)) {
                            return [2 /*return*/, new Error("Staker has insufficient allowance to stake " + amount.toString() + "\n            (allowance for " + votingMachine.address + " is " + allowance.toString() + ")")];
                        }
                        if (!!error.message.match(/event was found/)) {
                            if (proposalState.state === IProposalStage.Boosted) {
                                return [2 /*return*/, new Error("Staking failed because the proposal is boosted")];
                            }
                        }
                        // if we have found no known error, we return the original error
                        return [2 /*return*/, error];
                }
            });
        }); };
        var createTransaction = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {};
                        return [4 /*yield*/, this.votingMachine()];
                    case 1: return [2 /*return*/, (_a.contract = _b.sent(),
                            _a.method = 'stake',
                            _a.args = [
                                this.id,
                                outcome,
                                amount.toString() // the amount of tokens to stake
                            ],
                            _a)];
                }
            });
        }); };
        var observable = rxjs_1.from(createTransaction()).pipe(operators_1.concatMap(function (transaction) {
            return _this.context.sendTransaction(transaction, mapReceipt, errorHandler);
        }));
        return index_1.toIOperationObservable(observable);
    };
    Proposal.prototype.votes = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.proposal = this.id;
        return index_1.Vote.search(this.context, options, apolloQueryOptions);
    };
    Proposal.prototype.stakes = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.proposal = this.id;
        return index_1.Stake.search(this.context, options, apolloQueryOptions);
    };
    Proposal.prototype.rewards = function (options, apolloQueryOptions) {
        if (options === void 0) { options = {}; }
        if (apolloQueryOptions === void 0) { apolloQueryOptions = {}; }
        if (!options.where) {
            options.where = {};
        }
        options.where.proposal = this.id;
        return index_1.Reward.search(this.context, options, apolloQueryOptions);
    };
    Proposal.prototype.execute = function () {
        var _this = this;
        var mapReceipt = function (receipt) { return undefined; };
        var errorHandler = function (err) { return __awaiter(_this, void 0, void 0, function () {
            var votingMachine, proposalDataFromVotingMachine, msg, msg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.votingMachine()];
                    case 1:
                        votingMachine = _a.sent();
                        return [4 /*yield*/, votingMachine.proposals(this.id)];
                    case 2:
                        proposalDataFromVotingMachine = _a.sent();
                        if (proposalDataFromVotingMachine.callbacks === index_1.NULL_ADDRESS) {
                            msg = "Error in proposal.execute(): A proposal with id " + this.id + " does not exist";
                            return [2 /*return*/, Error(msg)];
                        }
                        else if (proposalDataFromVotingMachine.state === '2') {
                            msg = "Error in proposal.execute(): proposal " + this.id + " already executed";
                            return [2 /*return*/, Error(msg)];
                        }
                        return [2 /*return*/, err];
                }
            });
        }); };
        var createTransaction = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {};
                        return [4 /*yield*/, this.votingMachine()];
                    case 1: return [2 /*return*/, (_a.contract = _b.sent(),
                            _a.method = 'execute',
                            _a.args = [this.id],
                            _a)];
                }
            });
        }); };
        var observable = rxjs_1.from(createTransaction()).pipe(operators_1.concatMap(function (transaction) {
            return _this.context.sendTransaction(transaction, mapReceipt, errorHandler);
        }));
        return index_1.toIOperationObservable(observable);
    };
    Proposal.prototype.vote = function (outcome, amount) {
        var _this = this;
        if (amount === void 0) { amount = 0; }
        var mapReceipt = function (receipt) {
            try {
                var _a = index_1.getEventAndArgs(receipt, 'VoteProposal', 'Proposal.vote'), event_1 = _a[0], args = _a[1];
                return new index_1.Vote(_this.context, {
                    id: index_1.eventId(event_1),
                    amount: args[3],
                    // createdAt is "about now", but we cannot calculate the data that will be indexed by the subgraph
                    createdAt: 0,
                    outcome: outcome,
                    proposal: {
                        id: _this.id,
                        entity: _this
                    },
                    voter: args[2] // _vote
                });
            }
            catch (e) {
                // no vote was cast
                return null;
            }
        };
        var errorHandler = function (error) { return __awaiter(_this, void 0, void 0, function () {
            var proposal, votingMachine, proposalDataFromVotingMachine, msg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        proposal = this;
                        return [4 /*yield*/, this.votingMachine()];
                    case 1:
                        votingMachine = _a.sent();
                        return [4 /*yield*/, votingMachine.proposals(proposal.id)];
                    case 2:
                        proposalDataFromVotingMachine = _a.sent();
                        if (proposalDataFromVotingMachine.proposer === index_1.NULL_ADDRESS) {
                            return [2 /*return*/, Error("Error in vote(): unknown proposal with id " + proposal.id)];
                        }
                        if (proposalDataFromVotingMachine.state === '2') {
                            msg = "Error in vote(): proposal " + proposal.id + " already executed";
                            return [2 /*return*/, Error(msg)];
                        }
                        // if everything seems fine, just return the original error
                        return [2 /*return*/, error];
                }
            });
        }); };
        var createTransaction = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {};
                        return [4 /*yield*/, this.votingMachine()];
                    case 1: return [2 /*return*/, (_a.contract = _b.sent(),
                            _a.method = 'vote',
                            _a.args = [
                                this.id,
                                outcome,
                                amount.toString(),
                                index_1.NULL_ADDRESS
                            ],
                            _a)];
                }
            });
        }); };
        var observable = rxjs_1.from(createTransaction()).pipe(operators_1.concatMap(function (transaction) {
            return _this.context.sendTransaction(transaction, mapReceipt, errorHandler);
        }));
        return index_1.toIOperationObservable(observable);
    };
    return Proposal;
}(index_1.Entity));
exports.Proposal = Proposal;
var templateObject_1, templateObject_2;
//# sourceMappingURL=proposal.js.map