import { Address, Arc, IGenesisProtocolParams, IPluginState, IProposalBaseCreateOptions, ISchemeRegistrarProposalState, ITransaction, ITransactionReceipt, ProposalPlugin, SchemeRegistrarProposal } from '../../index';
export interface ISchemeRegistrarState extends IPluginState {
    pluginParams: {
        votingMachine: Address;
        voteRemoveParams: IGenesisProtocolParams;
        voteRegisterParams: IGenesisProtocolParams;
    };
}
export interface IProposalCreateOptionsSR extends IProposalBaseCreateOptions {
    proposalType: 'SchemeRegistrarAdd' | 'SchemeRegistrarEdit' | 'SchemeRegistrarRemove';
    parametersHash?: string;
    permissions?: string;
    pluginToRegister?: Address;
}
export declare class SchemeRegistrarPlugin extends ProposalPlugin<ISchemeRegistrarState, ISchemeRegistrarProposalState, IProposalCreateOptionsSR> {
    static fragment: {
        name: string;
        fragment: import("graphql").DocumentNode;
    };
    static itemMap(arc: Arc, item: any, queriedId?: string): ISchemeRegistrarState | null;
    createProposalTransaction(options: IProposalCreateOptionsSR): Promise<ITransaction>;
    createProposalTransactionMap(options: IProposalCreateOptionsSR): (receipt: ITransactionReceipt) => SchemeRegistrarProposal;
}
