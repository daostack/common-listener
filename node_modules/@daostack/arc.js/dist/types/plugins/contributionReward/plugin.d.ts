import BN from 'bn.js';
import { Address, Arc, IContributionRewardProposalState, IGenesisProtocolParams, IPluginState, IProposalBaseCreateOptions, ITransaction, ProposalPlugin, transactionResultHandler } from '../../index';
export interface IContributionRewardState extends IPluginState {
    pluginParams: {
        votingMachine: Address;
        voteParams: IGenesisProtocolParams;
    };
}
export interface IProposalCreateOptionsCR extends IProposalBaseCreateOptions {
    beneficiary: Address;
    nativeTokenReward?: BN;
    reputationReward?: BN;
    ethReward?: BN;
    externalTokenReward?: BN;
    externalTokenAddress?: Address;
    periodLength?: number;
    periods?: any;
}
export declare class ContributionRewardPlugin extends ProposalPlugin<IContributionRewardState, IContributionRewardProposalState, IProposalCreateOptionsCR> {
    static fragment: {
        name: string;
        fragment: import("graphql").DocumentNode;
    };
    static itemMap(context: Arc, item: any, queriedId?: string): IContributionRewardState | null;
    createProposalTransaction(options: IProposalCreateOptionsCR): Promise<ITransaction>;
    createProposalTransactionMap(): transactionResultHandler<any>;
}
