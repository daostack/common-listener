import BN from 'bn.js';
import { DocumentNode } from 'graphql';
import { Observable } from 'rxjs';
import { Address, Arc, IApolloQueryOptions, IProposalState, Operation, Proposal } from '../../index';
export interface IContributionRewardProposalState extends IProposalState {
    beneficiary: Address;
    externalTokenReward: BN;
    externalToken: Address;
    ethReward: BN;
    nativeTokenReward: BN;
    periods: number;
    periodLength: number;
    reputationReward: BN;
    alreadyRedeemedNativeTokenPeriods: number;
    alreadyRedeemedReputationPeriods: number;
    alreadyRedeemedExternalTokenPeriods: number;
    alreadyRedeemedEthPeriods: number;
    reputationChangeLeft: BN | null;
    nativeTokenRewardLeft: BN | null;
    ethRewardLeft: BN | null;
    externalTokenRewardLeft: BN | null;
}
export declare class ContributionRewardProposal extends Proposal<IContributionRewardProposalState> {
    static get fragment(): {
        name: string;
        fragment: DocumentNode;
    };
    static itemMap(context: Arc, item: any, queriedId?: string): IContributionRewardProposalState | null;
    private static fragmentField;
    state(apolloQueryOptions: IApolloQueryOptions): Observable<IContributionRewardProposalState>;
    redeemerContract(): import("ethers").Contract;
    redeemRewards(beneficiary?: Address): Operation<boolean>;
}
