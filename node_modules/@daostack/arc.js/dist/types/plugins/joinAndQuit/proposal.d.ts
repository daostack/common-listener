import BN from 'bn.js';
import { DocumentNode } from 'graphql';
import { Observable } from 'rxjs';
import { IEntityRef } from '../../entity';
import { Address, Arc, DAO, IApolloQueryOptions, IProposalState, Operation, Proposal } from '../../index';
export interface IJoinAndQuitProposalState extends IProposalState {
    proposedMember: Address;
    dao: IEntityRef<DAO>;
    funding: BN;
    executed: boolean;
    reputationMinted: BN;
}
export declare class JoinAndQuitProposal extends Proposal<IJoinAndQuitProposalState> {
    static get fragment(): {
        name: string;
        fragment: DocumentNode;
    };
    static itemMap(context: Arc, item: any, query?: string): IJoinAndQuitProposalState | null;
    private static fragmentField;
    state(apolloQueryOptions: IApolloQueryOptions): Observable<IJoinAndQuitProposalState>;
    /**
     * Redeem this proposal after it was accepted
     */
    redeem(): Operation<boolean>;
}
