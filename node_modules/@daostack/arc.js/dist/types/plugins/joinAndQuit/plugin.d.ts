import BN from 'bn.js';
import { DocumentNode } from 'graphql';
import { Address, Arc, IGenesisProtocolParams, IJoinAndQuitProposalState, IPluginState, IProposalBaseCreateOptions, ITransaction, ProposalPlugin, transactionErrorHandler, transactionResultHandler } from '../../index';
export interface IJoinAndQuitState extends IPluginState {
    pluginParams: {
        votingMachine: Address;
        voteParams: IGenesisProtocolParams;
        fundingToken: Address;
        minFeeToJoin: BN;
        memberReputation: BN;
        fundingGoal: BN;
        fundingGoalDeadline: Date;
    };
}
export interface IProposalCreateOptionsJoinAndQuit extends IProposalBaseCreateOptions {
    descriptionHash: string;
    fee: BN;
}
export declare class JoinAndQuit extends ProposalPlugin<IJoinAndQuitState, IJoinAndQuitProposalState, IProposalCreateOptionsJoinAndQuit> {
    static get fragment(): {
        name: string;
        fragment: DocumentNode;
    };
    static itemMap(context: Arc, item: any, query?: string): IJoinAndQuitState | null;
    private static fragmentField;
    createProposalTransaction(options: IProposalCreateOptionsJoinAndQuit): Promise<ITransaction>;
    createProposalTransactionMap(): transactionResultHandler<any>;
    createProposalErrorHandler(options: IProposalCreateOptionsJoinAndQuit): transactionErrorHandler;
}
