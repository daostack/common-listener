import BN from 'bn.js';
import { DocumentNode } from 'graphql';
import { Address, Arc, IFundingRequestProposalState, IGenesisProtocolParams, IPluginState, IProposalBaseCreateOptions, ITransaction, ProposalPlugin, transactionErrorHandler, transactionResultHandler } from '../../index';
export interface IFundingRequestState extends IPluginState {
    pluginParams: {
        votingMachine: Address;
        voteParams: IGenesisProtocolParams;
        fundingToken: Address;
    };
}
export interface IProposalCreateOptionsFundingRequest extends IProposalBaseCreateOptions {
    beneficiary: Address;
    amount: BN;
    descriptionHash: string;
}
export declare class FundingRequest extends ProposalPlugin<IFundingRequestState, IFundingRequestProposalState, IProposalCreateOptionsFundingRequest> {
    static get fragment(): {
        name: string;
        fragment: DocumentNode;
    };
    static itemMap(context: Arc, item: any, query?: string): IFundingRequestState | null;
    private static fragmentField;
    createProposalTransaction(options: IProposalCreateOptionsFundingRequest): Promise<ITransaction>;
    createProposalTransactionMap(): transactionResultHandler<any>;
    createProposalErrorHandler(options: IProposalCreateOptionsFundingRequest): transactionErrorHandler;
}
