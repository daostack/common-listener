import BN from 'bn.js';
import { Observable } from 'rxjs';
import { Address, Arc, CompetitionProposal, CompetitionVote, Entity, IApolloQueryOptions, ICommonQueryOptions, ICompetitionVoteQueryOptions, IEntityRef, Operation } from '../../index';
export interface ICompetitionSuggestionState {
    id: string;
    suggestionId: number;
    proposal: IEntityRef<CompetitionProposal>;
    descriptionHash: string;
    title?: string;
    description?: string;
    url?: string;
    suggester: Address;
    beneficiary: Address;
    tags: string[];
    totalVotes: BN;
    createdAt: Date;
    redeemedAt: Date | null;
    rewardPercentage: number;
    positionInWinnerList: number | null;
    isWinner: boolean;
}
export interface ICompetitionSuggestionQueryOptions extends ICommonQueryOptions {
    where?: {
        id?: string;
        proposal?: string;
        suggestionId?: number;
        positionInWinnerList?: number | null;
        positionInWinnerList_not?: number | null;
    };
}
export declare class CompetitionSuggestion extends Entity<ICompetitionSuggestionState> {
    static fragments: {
        CompetitionSuggestionFields: import("graphql").DocumentNode;
    };
    static search(context: Arc, options?: ICompetitionSuggestionQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<CompetitionSuggestion[]>;
    static calculateId(opts: {
        plugin: Address;
        suggestionId: number;
    }): string;
    private static itemMap;
    suggestionId?: number;
    constructor(context: Arc, idOrOpts: string | {
        suggestionId: number;
        plugin: string;
    } | ICompetitionSuggestionState);
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<ICompetitionSuggestionState>;
    fetchState(): Promise<ICompetitionSuggestionState>;
    getPosition(): Promise<number | null>;
    isWinner(): Promise<boolean>;
    votes(options?: ICompetitionVoteQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<CompetitionVote[]>;
    redeem(): Operation<boolean>;
    vote(): Operation<CompetitionVote>;
}
