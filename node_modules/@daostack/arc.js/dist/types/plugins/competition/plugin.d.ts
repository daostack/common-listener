import BN from 'bn.js';
import { Observable } from 'rxjs';
import { Address, Arc, CompetitionProposal, CompetitionSuggestion, CompetitionVote, IApolloQueryOptions, ICompetitionProposalState, ICompetitionSuggestionQueryOptions, IContributionRewardExtState, IProposalBaseCreateOptions, ITransaction, IVoteQueryOptions, Operation, Proposal, ProposalPlugin, transactionErrorHandler, transactionResultHandler } from '../../index';
export interface IProposalCreateOptionsComp extends IProposalBaseCreateOptions {
    endTime: Date;
    reputationReward?: BN;
    ethReward?: BN;
    externalTokenReward?: BN;
    externalTokenAddress?: Address;
    rewardSplit: number[];
    nativeTokenReward?: BN;
    numberOfVotesPerVoter: number;
    proposerIsAdmin?: boolean;
    startTime: Date | null;
    suggestionsEndTime: Date;
    votingStartTime: Date;
}
export declare class CompetitionPlugin extends ProposalPlugin<IContributionRewardExtState, ICompetitionProposalState, IProposalCreateOptionsComp> {
    static itemMap(context: Arc, item: any, queriedId?: string): IContributionRewardExtState | null;
    static getCompetitionContract(arc: Arc, state: IContributionRewardExtState): import("ethers").Contract;
    static isCompetitionPlugin(arc: Arc, state: IContributionRewardExtState): boolean;
    suggestions(options?: ICompetitionSuggestionQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<CompetitionSuggestion[]>;
    votes(options?: IVoteQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<CompetitionVote[]>;
    createCompetitionProposalTransaction(options: IProposalCreateOptionsComp): Promise<ITransaction>;
    createProposal(options: IProposalCreateOptionsComp): Operation<Proposal<ICompetitionProposalState>>;
    createProposalTransactionMap(): transactionResultHandler<CompetitionProposal>;
    createProposalErrorHandler(options: IProposalCreateOptionsComp): transactionErrorHandler;
    ethBalance(): Promise<Observable<BN>>;
    protected createProposalTransaction(options: IProposalCreateOptionsComp): Promise<ITransaction>;
}
