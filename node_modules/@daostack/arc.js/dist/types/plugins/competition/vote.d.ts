import BN from 'bn.js';
import { Observable } from 'rxjs';
import { Address, Arc, Entity, IApolloQueryOptions, ICommonQueryOptions } from '../../index';
export interface ICompetitionVoteState {
    id: string;
    proposal: string;
    suggestion: string;
    voter: Address;
    createdAt?: Date;
    reputation: BN;
}
export interface ICompetitionVoteQueryOptions extends ICommonQueryOptions {
    where?: {
        id?: string;
        suggestion?: string;
        voter?: Address;
        proposal?: string;
        proposal_not?: string | null;
    };
}
export declare class CompetitionVote extends Entity<ICompetitionVoteState> {
    static fragments: {
        CompetitionVoteFields: import("graphql").DocumentNode;
    };
    static search(context: Arc, options?: ICompetitionVoteQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<CompetitionVote[]>;
    static itemMap(context: Arc, item: any, queriedId?: string): ICompetitionVoteState;
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<ICompetitionVoteState>;
}
