import { Observable } from 'rxjs';
import { Address, Arc, CompetitionSuggestion, CompetitionVote, IApolloQueryOptions, ICompetitionSuggestionQueryOptions, IContributionRewardExtProposalState, ITransactionReceipt, Operation, Proposal } from '../../index';
export interface ICompetitionProposalState extends IContributionRewardExtProposalState {
    id: string;
    admin: Address;
    contract: Address;
    endTime: Date;
    numberOfWinners: number;
    rewardSplit: number[];
    startTime: Date;
    votingStartTime: Date;
    suggestionsEndTime: Date;
    numberOfVotesPerVoter: number;
    snapshotBlock: number;
    createdAt: Date;
    totalVotes: number;
    totalSuggestions: number;
    numberOfWinningSuggestions: number;
}
export declare class CompetitionProposal extends Proposal<ICompetitionProposalState> {
    static fragment: {
        name: string;
        fragment: import("graphql").DocumentNode;
    };
    static itemMap(context: Arc, item: any, queriedId?: string): ICompetitionProposalState | null;
    state(apolloQueryOptions: IApolloQueryOptions): Observable<ICompetitionProposalState>;
    redeemerContract(): import("ethers").Contract;
    suggestions(options?: ICompetitionSuggestionQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<CompetitionSuggestion[]>;
    competitionVotes(options?: ICompetitionSuggestionQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<CompetitionVote[]>;
    redeemRewards(beneficiary?: Address): Operation<boolean>;
    createSuggestion(options: {
        title: string;
        description: string;
        beneficiary?: Address;
        tags?: string[];
        url?: string;
    }): Operation<CompetitionSuggestion>;
    voteSuggestion(options: {
        suggestionId: number;
    }): Operation<CompetitionVote>;
    redeemSuggestion(options: {
        suggestionId: number;
    }): Operation<boolean>;
    mapReceipt: (receipt: ITransactionReceipt) => Promise<CompetitionSuggestion>;
    errorHandler: (err: Error) => Promise<never>;
    private getState;
}
