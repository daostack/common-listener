import { Address, Arc, IGenericPluginProposalState, IGenesisProtocolParams, IPluginState, IProposalBaseCreateOptions, ITransaction, ProposalPlugin, transactionResultHandler } from '../../index';
export interface IGenericPluginState extends IPluginState {
    pluginParams: {
        votingMachine: Address;
        contractToCall: Address;
        voteParams: IGenesisProtocolParams;
    };
}
export interface IProposalCreateOptionsGS extends IProposalBaseCreateOptions {
    callData?: string;
    value?: number;
}
export declare class GenericPlugin extends ProposalPlugin<IGenericPluginState, IGenericPluginProposalState, IProposalCreateOptionsGS> {
    static fragment: {
        name: string;
        fragment: import("graphql").DocumentNode;
    };
    static itemMap(context: Arc, item: any, queriedId?: string): IGenericPluginState | null;
    createProposalTransaction(options: IProposalCreateOptionsGS): Promise<ITransaction>;
    createProposalTransactionMap(): transactionResultHandler<any>;
}
