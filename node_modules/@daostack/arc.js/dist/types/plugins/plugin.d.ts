import { DocumentNode } from 'graphql';
import { Observable } from 'rxjs';
import { Address, Arc, DAO, Entity, IApolloQueryOptions, ICommonQueryOptions, IEntityRef } from '../index';
export interface IPluginState {
    id: string;
    address: Address;
    dao: IEntityRef<DAO>;
    name: string;
    version: string;
    canDelegateCall: boolean;
    canUpgradeController: boolean;
    canManageGlobalConstraints: boolean;
    canRegisterPlugins: boolean;
    numberOfQueuedProposals: number;
    numberOfPreBoostedProposals: number;
    numberOfBoostedProposals: number;
}
export interface IPluginQueryOptions extends ICommonQueryOptions {
    where?: {
        address?: Address;
        canDelegateCall?: boolean;
        canRegisterPlugins?: boolean;
        canUpgradeController?: boolean;
        canManageGlobalConstraints?: boolean;
        dao?: Address;
        id?: string;
        name?: string;
        [key: string]: any;
    };
}
export declare abstract class Plugin<TPluginState extends IPluginState> extends Entity<TPluginState> {
    static get baseFragment(): DocumentNode;
    static fragment: {
        name: string;
        fragment: DocumentNode;
    } | undefined;
    static search<TPluginState extends IPluginState>(context: Arc, options?: IPluginQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Array<Plugin<TPluginState>>>;
    static calculateId(opts: {
        daoAddress: Address;
        contractAddress: Address;
    }): string;
    protected static itemMap: (arc: Arc, item: any, queriedId?: string) => IPluginState | null;
    protected static itemMapToBaseState(context: Arc, item: any): IPluginState;
    private static baseFragmentField;
    'constructor': typeof Plugin;
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<TPluginState>;
    fetchState(apolloQueryOptions?: IApolloQueryOptions, refetch?: boolean): Promise<TPluginState>;
}
