import BN from 'bn.js';
import { Observable } from 'rxjs';
import { Address, Arc, ContributionRewardExtProposal, IContributionRewardExtProposalState, IGenesisProtocolParams, IPluginState, IProposalBaseCreateOptions, ITransaction, ITransactionReceipt, ProposalPlugin } from '../../index';
export interface IContributionRewardExtState extends IPluginState {
    pluginParams: {
        votingMachine: Address;
        voteParams: IGenesisProtocolParams;
        rewarder: Address;
    };
}
export interface IProposalCreateOptionsCRExt extends IProposalBaseCreateOptions {
    beneficiary: Address;
    nativeTokenReward?: BN;
    reputationReward?: BN;
    ethReward?: BN;
    externalTokenReward?: BN;
    externalTokenAddress?: Address;
    proposer: Address;
}
export declare class ContributionRewardExtPlugin extends ProposalPlugin<IContributionRewardExtState, IContributionRewardExtProposalState, IProposalCreateOptionsCRExt> {
    static fragment: {
        name: string;
        fragment: import("graphql").DocumentNode;
    };
    static itemMap(context: Arc, item: any, queriedId?: string): IContributionRewardExtState | null;
    createProposalTransaction(options: IProposalCreateOptionsCRExt): Promise<ITransaction>;
    createProposalTransactionMap(): (receipt: ITransactionReceipt) => ContributionRewardExtProposal;
    ethBalance(): Promise<Observable<BN>>;
}
