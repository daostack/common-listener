import BN from 'bn.js';
import { DocumentNode } from 'graphql';
import { Observable } from 'rxjs';
import { Address, Arc, Entity, IApolloQueryOptions, ICommonQueryOptions } from './index';
export interface IRewardState {
    id: string;
    beneficiary: Address;
    createdAt: Date;
    proposalId: string;
    reputationForVoter: BN;
    tokensForStaker: BN;
    daoBountyForStaker: BN;
    reputationForProposer: BN;
    tokenAddress: Address;
    reputationForVoterRedeemedAt: number;
    tokensForStakerRedeemedAt: number;
    reputationForProposerRedeemedAt: number;
    daoBountyForStakerRedeemedAt: number;
}
export interface IRewardQueryOptions extends ICommonQueryOptions {
    where?: {
        id?: string;
        beneficiary?: Address;
        dao?: Address;
        proposal?: string;
        createdAtAfter?: Date;
        createdAtBefore?: Date;
        [key: string]: any;
    };
}
export declare class Reward extends Entity<IRewardState> {
    static fragments: {
        RewardFields: DocumentNode;
    };
    static search(context: Arc, options?: IRewardQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Reward[]>;
    static itemMap(context: Arc, item: any, queriedId?: string): IRewardState;
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<IRewardState>;
}
