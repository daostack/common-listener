import { Observable } from 'rxjs';
import { Address, AnyPlugin, Arc, DAO, Entity, IApolloQueryOptions, ICommonQueryOptions, IEntityRef } from './index';
export interface IQueueState {
    dao: IEntityRef<DAO>;
    id: string;
    name: string;
    plugin: IEntityRef<AnyPlugin>;
    threshold: number;
    votingMachine: Address;
}
export interface IQueueQueryOptions extends ICommonQueryOptions {
    where?: {
        dao?: Address;
        votingMachine?: Address;
        plugin?: Address;
        [key: string]: any;
    };
}
export declare class Queue extends Entity<IQueueState> {
    dao: DAO;
    static search(context: Arc, options?: IQueueQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Queue[]>;
    static itemMap(context: Arc, item: any, queriedId?: string): IQueueState;
    constructor(context: Arc, idOrOpts: string | IQueueState, dao: DAO);
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<IQueueState>;
}
