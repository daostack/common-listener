import BN from 'bn.js';
import { Observable } from 'rxjs';
import { Address, AnyProposal, Arc, DAO, Date, Entity, IApolloQueryOptions, ICommonQueryOptions, IEntityRef, IProposalQueryOptions, IStakeQueryOptions, IVoteQueryOptions, Reward, Stake, Vote } from './index';
export interface IMemberState {
    id: string;
    address: Address;
    contract?: Address;
    createdAt: Date;
    dao: IEntityRef<DAO>;
    reputation: BN;
}
export interface IMemberQueryOptions extends ICommonQueryOptions {
    where?: {
        id?: string;
        address?: Address;
        dao?: Address;
    };
}
/**
 * Represents an account that holds reputaion in a specific DAO
 */
export declare class Member extends Entity<IMemberState> {
    static fragments: {
        ReputationHolderFields: import("graphql").DocumentNode;
    };
    static search(context: Arc, options?: IMemberQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Member[]>;
    static itemMap(context: Arc, item: any, queriedId?: string): IMemberState;
    static calculateId(opts: {
        contract: Address;
        address: Address;
    }): string;
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<IMemberState>;
    dao(): Promise<DAO>;
    rewards(): Observable<Reward[]>;
    proposals(options?: IProposalQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<AnyProposal[]>;
    stakes(options?: IStakeQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Stake[]>;
    votes(options?: IVoteQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Vote[]>;
    setState(opts: IMemberState): IMemberState;
}
