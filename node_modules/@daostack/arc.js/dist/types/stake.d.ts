import BN from 'bn.js';
import { DocumentNode } from 'graphql';
import { Observable } from 'rxjs';
import { Address, AnyProposal, Arc, Entity, IApolloQueryOptions, ICommonQueryOptions, IEntityRef, IProposalOutcome } from './index';
export interface IStakeState {
    id: string;
    staker: Address;
    createdAt: Date | undefined;
    outcome: IProposalOutcome;
    amount: BN;
    proposal: IEntityRef<AnyProposal>;
}
export interface IStakeQueryOptions extends ICommonQueryOptions {
    where?: {
        id?: string;
        staker?: Address;
        dao?: Address;
        proposal?: string;
        createdAt?: number;
        [key: string]: any;
    };
}
export declare class Stake extends Entity<IStakeState> {
    static fragments: {
        StakeFields: DocumentNode;
    };
    static search(context: Arc, options?: IStakeQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Stake[]>;
    static itemMap: (context: Arc, item: any, queriedId?: string | undefined) => IStakeState;
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<IStakeState>;
}
