import { Observable } from 'rxjs';
import { Address, Arc, Entity, IApolloQueryOptions, ICommonQueryOptions } from './index';
export interface IEventState {
    id: string;
    dao: string;
    proposal: string;
    user: string;
    type: string;
    data: {
        [key: string]: any;
    };
    timestamp: string;
}
export interface IEventQueryOptions extends ICommonQueryOptions {
    where?: {
        id?: string;
        dao?: Address;
        proposal?: string;
        user?: Address;
        [key: string]: any;
    };
}
export declare class Event extends Entity<IEventState> {
    static fragments: {
        EventFields: import("graphql").DocumentNode;
    };
    static search(context: Arc, options?: IEventQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Event[]>;
    static itemMap(context: Arc, item: any, queriedId?: string): IEventState;
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<IEventState>;
}
