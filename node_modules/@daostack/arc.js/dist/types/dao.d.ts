import BN from 'bn.js';
import { Observable } from 'rxjs';
import { Address, AnyPlugin, AnyProposal, AnyProposalPlugin, Arc, Entity, IApolloQueryOptions, ICommonQueryOptions, IEntityRef, IMemberQueryOptions, IMemberState, IPluginQueryOptions, IProposalBaseCreateOptions, IProposalQueryOptions, IRewardQueryOptions, IStakeQueryOptions, IVoteQueryOptions, Member, Proposal, Reputation, Reward, Stake, Token, Vote } from './index';
export interface IDAOState {
    id: Address;
    address: Address;
    name: string;
    register: 'na' | 'proposed' | 'registered' | 'unRegistered';
    reputation: IEntityRef<Reputation>;
    token: IEntityRef<Token>;
    tokenName: string;
    tokenSymbol: string;
    memberCount: number;
    reputationTotalSupply: BN;
    tokenTotalSupply: BN;
    numberOfQueuedProposals: number;
    numberOfPreBoostedProposals: number;
    numberOfBoostedProposals: number;
}
export interface IDAOQueryOptions extends ICommonQueryOptions {
    where?: {
        address?: Address;
        name?: string;
        register?: 'na' | 'proposed' | 'registered' | 'unRegistered';
        [key: string]: any;
    };
}
export declare class DAO extends Entity<IDAOState> {
    static fragments: {
        DAOFields: import("graphql").DocumentNode;
    };
    static search(context: Arc, options?: IDAOQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<DAO[]>;
    static itemMap: (context: Arc, item: any, queriedId?: string | undefined) => IDAOState;
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<IDAOState>;
    nativeReputation(): Observable<Reputation>;
    ethBalance(): Promise<Observable<BN>>;
    plugins(options?: IPluginQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<AnyPlugin[]>;
    proposalPlugins(options?: IPluginQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<AnyProposalPlugin[]>;
    plugin(options: IPluginQueryOptions): Promise<AnyPlugin>;
    proposalPlugin(options: IPluginQueryOptions): Promise<AnyProposalPlugin>;
    members(options?: IMemberQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Member[]>;
    member(idOrOpts: IMemberState | string): Member;
    proposals(options?: IProposalQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<AnyProposal[]>;
    rewards(options?: IRewardQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Reward[]>;
    votes(options?: IVoteQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Vote[]>;
    stakes(options?: IStakeQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Stake[]>;
    createProposal(options: IProposalBaseCreateOptions): Promise<import(".").Operation<Proposal<import(".").IProposalState>>>;
}
