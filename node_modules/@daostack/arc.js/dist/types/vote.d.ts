import BN from 'bn.js';
import { DocumentNode } from 'graphql';
import { Observable } from 'rxjs';
import { Address, AnyProposal, Arc, Date, Entity, IApolloQueryOptions, ICommonQueryOptions, IEntityRef, IProposalOutcome } from './index';
export interface IVoteState {
    id: string;
    voter: Address;
    createdAt: Date | undefined;
    outcome: IProposalOutcome;
    amount: BN;
    proposal: IEntityRef<AnyProposal>;
    dao?: Address;
}
export interface IVoteQueryOptions extends ICommonQueryOptions {
    where?: {
        id?: string;
        voter?: Address;
        outcome?: IProposalOutcome;
        proposal?: string;
        dao?: Address;
        [key: string]: any;
    };
}
export declare class Vote extends Entity<IVoteState> {
    static fragments: {
        VoteFields: DocumentNode;
    };
    static search(context: Arc, options?: IVoteQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Vote[]>;
    static itemMap: (context: Arc, item: any, queriedId?: string | undefined) => IVoteState;
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<IVoteState>;
}
