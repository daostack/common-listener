import BN from 'bn.js';
import { Observable } from 'rxjs';
import { Address, Arc, DAO, Entity, IApolloQueryOptions, ICommonQueryOptions, IEntityRef, Operation } from './index';
export interface IReputationState {
    id: Address;
    address: Address;
    totalSupply: BN;
    dao: IEntityRef<DAO>;
}
export interface IReputationQueryOptions extends ICommonQueryOptions {
    id?: string;
    dao?: Address;
    [key: string]: any;
}
export declare class Reputation extends Entity<IReputationState> {
    static search(context: Arc, options?: IReputationQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Reputation[]>;
    static itemMap: (context: Arc, item: any, queriedId?: string | undefined) => IReputationState;
    address: Address;
    constructor(context: Arc, idOrOpts: string | IReputationState);
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<IReputationState>;
    reputationOf(address: Address): Observable<BN>;
    contract(): import("ethers").Contract;
    mint(beneficiary: Address, amount: BN): Operation<undefined>;
}
