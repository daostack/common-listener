import BN from 'bn.js';
import { Observable } from 'rxjs';
import { Address, Arc, Entity, Hash, IApolloQueryOptions, ICommonQueryOptions } from './index';
export interface ITokenState {
    id: Address;
    address: Address;
    name: string;
    owner: Address;
    symbol: string;
    totalSupply: BN;
}
export interface ITokenQueryOptions extends ICommonQueryOptions {
    where?: {
        address?: Address;
        name?: string;
        owner?: Address;
        symbol?: string;
        [key: string]: any;
    };
}
export interface IApproval {
    id: Hash;
    txHash: Hash;
    contract: Address;
    owner: Address;
    spender: Address;
    value: BN;
}
export interface IAllowance {
    token: Address;
    owner: Address;
    spender: Address;
    amount: BN;
}
export declare class Token extends Entity<ITokenState> {
    static search(context: Arc, options?: ITokenQueryOptions, apolloQueryOptions?: IApolloQueryOptions): Observable<Token[]>;
    static itemMap: (context: Arc, item: any, queriedId?: string | undefined) => ITokenState;
    address: string;
    constructor(context: Arc, idOrOpts: string | ITokenState);
    state(apolloQueryOptions?: IApolloQueryOptions): Observable<ITokenState>;
    contract(): import("ethers").Contract;
    balanceOf(owner: string): Observable<BN>;
    allowance(owner: Address, spender: Address): Observable<BN>;
    mint(beneficiary: Address, amount: BN): import(".").Operation<undefined>;
    transfer(beneficiary: Address, amount: BN): import(".").Operation<undefined>;
    approveForStaking(spender: Address, amount: BN): import(".").Operation<undefined>;
}
